           SPELL=byaccj
         VERSION=1.13
          SOURCE="${SPELL}${VERSION}_src.tar.gz"
   SOURCE_URL[0]=http://downloads.sourceforge.net/sourceforge/$SPELL/$SOURCE
     SOURCE_HASH=sha512:973bb9d82a6156551affe8f28902e374fb93b241f62966be0d04220086bb9b3b0f42f73ee1685fa857b57bc42c265882ca7d50c0408bb87986125f13118be36d
SOURCE_DIRECTORY="${BUILD_DIRECTORY}/${SPELL}${VERSION}_src"
        WEB_SITE=http://byaccj.sourceforge.net/
      LICENSE[0]=PD
         ENTERED=20061111
           SHORT="an LALR parser generator written in C"
cat << EOF
Of course, the original YACC design is about twenty years old now, and newer
and better technologies are currently available. I think Jacc is great,
and so is Java Cup. Both of these provide more thorough parsing of LALR and
LL grammars than the venerable YACC. Yet the idea of a YACC for Java is,
in my opinion, extremely valuable.  Several benefits are derived from a Java
parser-generator of this sort:

    * BYACC/J can be executed from existing Makefiles and IDE's.  
    * BYACC/J is coded in C, so the generation of Java code is extremely fast.  
    * The resulting byte code is small -- starting at about 11 kbytes.  
    * Only one or two classfiles are included. If you need only a single type
      or an Object class, then one class file is generated. If you need a
      simple generic type, a simple data class is generated for you, making
      another small file.
    * No additional runtime libraries are required. The generated source code
      is the entire parser.
    * It can parse existing YACC grammars, enabling the 'Javanizing' ;-) of a
      large installed base of YACC source code (of course, your 'actions'
      need to be in Java).
    * Many developers are already very familiar with the workings of YACC.
    * It is absolutely free; no license, no royalties, free!
EOF
