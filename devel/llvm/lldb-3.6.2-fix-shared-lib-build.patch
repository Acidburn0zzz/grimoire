diff -ruN lldb-3.6.2.src/cmake/LLDBDependencies.cmake lldb-3.6.2.src.patched/cmake/LLDBDependencies.cmake
--- lldb-3.6.2.src/cmake/LLDBDependencies.cmake	2015-06-22 18:43:42.000000000 +0200
+++ lldb-3.6.2.src.patched/cmake/LLDBDependencies.cmake	2015-08-19 01:37:54.659931842 +0200
@@ -170,6 +170,7 @@
   mcdisassembler
   executionengine
   option
+  support
   )
 
 if ( NOT LLDB_DISABLE_PYTHON )
diff -ruN lldb-3.6.2.src/cmake/LLDBDependencies.cmake.orig lldb-3.6.2.src.patched/cmake/LLDBDependencies.cmake.orig
--- lldb-3.6.2.src/cmake/LLDBDependencies.cmake.orig	1970-01-01 01:00:00.000000000 +0100
+++ lldb-3.6.2.src.patched/cmake/LLDBDependencies.cmake.orig	2015-06-22 18:43:42.000000000 +0200
@@ -0,0 +1,184 @@
+set( LLDB_USED_LIBS
+  lldbBreakpoint
+  lldbCommands
+  lldbDataFormatters
+  lldbHost
+  lldbCore
+  lldbExpression
+  lldbInterpreter
+  lldbSymbol
+  lldbTarget
+  lldbUtility
+
+  # Plugins
+  lldbPluginDisassemblerLLVM
+  lldbPluginSymbolFileDWARF
+  lldbPluginSymbolFileSymtab
+  lldbPluginDynamicLoaderStatic
+  lldbPluginDynamicLoaderPosixDYLD
+  lldbPluginDynamicLoaderHexagonDYLD
+
+  lldbPluginObjectFileMachO
+  lldbPluginObjectFileELF
+  lldbPluginObjectFileJIT
+  lldbPluginSymbolVendorELF
+  lldbPluginObjectContainerBSDArchive
+  lldbPluginObjectContainerMachOArchive
+  lldbPluginProcessGDBRemote
+  lldbPluginProcessMachCore
+  lldbPluginProcessUtility
+  lldbPluginPlatformGDB
+  lldbPluginPlatformFreeBSD
+  lldbPluginPlatformKalimba
+  lldbPluginPlatformLinux
+  lldbPluginPlatformPOSIX
+  lldbPluginPlatformWindows
+  lldbPluginObjectFileMachO
+  lldbPluginObjectContainerMachOArchive
+  lldbPluginObjectContainerBSDArchive
+  lldbPluginPlatformMacOSX
+  lldbPluginDynamicLoaderMacOSXDYLD
+  lldbPluginUnwindAssemblyInstEmulation
+  lldbPluginUnwindAssemblyX86
+  lldbPluginAppleObjCRuntime
+  lldbPluginCXXItaniumABI
+  lldbPluginABIMacOSX_arm
+  lldbPluginABIMacOSX_arm64
+  lldbPluginABIMacOSX_i386
+  lldbPluginABISysV_x86_64
+  lldbPluginABISysV_hexagon
+  lldbPluginABISysV_ppc
+  lldbPluginABISysV_ppc64
+  lldbPluginInstructionARM
+  lldbPluginInstructionARM64
+  lldbPluginObjectFilePECOFF
+  lldbPluginOSPython
+  lldbPluginMemoryHistoryASan
+  lldbPluginInstrumentationRuntimeAddressSanitizer
+  )
+
+# Need to export the API in the liblldb.dll for Windows
+# The lldbAPI source files are added directly in liblldb
+if (NOT CMAKE_SYSTEM_NAME MATCHES "Windows" )
+  list(APPEND LLDB_USED_LIBS
+    lldbAPI
+    )
+endif ()
+
+# Windows-only libraries
+if ( CMAKE_SYSTEM_NAME MATCHES "Windows" )
+  list(APPEND LLDB_USED_LIBS
+    lldbPluginProcessWindows
+    lldbPluginProcessElfCore
+    lldbPluginJITLoaderGDB
+    Ws2_32
+    )
+endif ()
+
+# Linux-only libraries
+if ( CMAKE_SYSTEM_NAME MATCHES "Linux" )
+  list(APPEND LLDB_USED_LIBS
+    lldbPluginProcessLinux
+    lldbPluginProcessPOSIX
+    lldbPluginProcessElfCore
+    lldbPluginJITLoaderGDB
+   )
+endif ()
+
+# FreeBSD-only libraries
+if ( CMAKE_SYSTEM_NAME MATCHES "FreeBSD" )
+  list(APPEND LLDB_USED_LIBS
+    lldbPluginProcessFreeBSD
+    lldbPluginProcessPOSIX
+    lldbPluginProcessElfCore
+    lldbPluginJITLoaderGDB
+    )
+endif ()
+
+# Darwin-only libraries
+if ( CMAKE_SYSTEM_NAME MATCHES "Darwin" )
+  set(LLDB_VERS_GENERATED_FILE ${LLDB_BINARY_DIR}/source/LLDB_vers.c)
+  add_custom_command(OUTPUT ${LLDB_VERS_GENERATED_FILE}
+    COMMAND ${LLDB_SOURCE_DIR}/scripts/generate-vers.pl
+            ${LLDB_SOURCE_DIR}/lldb.xcodeproj/project.pbxproj liblldb_core
+            > ${LLDB_VERS_GENERATED_FILE})
+
+  set_source_files_properties(${LLDB_VERS_GENERATED_FILE} PROPERTIES GENERATED 1)
+  list(APPEND LLDB_USED_LIBS
+    lldbPluginDynamicLoaderDarwinKernel
+    lldbPluginProcessMacOSXKernel
+    lldbPluginSymbolVendorMacOSX
+    lldbPluginSystemRuntimeMacOSX
+    lldbPluginProcessElfCore
+    lldbPluginJITLoaderGDB
+    )
+endif()
+
+set( CLANG_USED_LIBS
+  clangAnalysis
+  clangAST
+  clangBasic
+  clangCodeGen
+  clangDriver
+  clangEdit
+  clangFrontend
+  clangLex
+  clangParse
+  clangRewrite
+  clangRewriteFrontend
+  clangSema
+  clangSerialization
+  )
+
+set(LLDB_SYSTEM_LIBS)
+if (NOT CMAKE_SYSTEM_NAME MATCHES "Windows" AND NOT __ANDROID_NDK__)
+  if (NOT LLDB_DISABLE_LIBEDIT)
+    list(APPEND LLDB_SYSTEM_LIBS edit)
+  endif()
+  if (NOT LLDB_DISABLE_CURSES)
+    list(APPEND LLDB_SYSTEM_LIBS panel ncurses)
+  endif()
+endif()
+# On FreeBSD backtrace() is provided by libexecinfo, not libc.
+if (CMAKE_SYSTEM_NAME MATCHES "FreeBSD")
+  list(APPEND LLDB_SYSTEM_LIBS execinfo)
+endif()
+
+if (NOT LLDB_DISABLE_PYTHON AND NOT LLVM_BUILD_STATIC)
+  list(APPEND LLDB_SYSTEM_LIBS ${PYTHON_LIBRARIES})
+endif()
+
+list(APPEND LLDB_SYSTEM_LIBS ${system_libs})
+
+if (LLVM_BUILD_STATIC)
+  list(APPEND LLDB_SYSTEM_LIBS python2.7 z util termcap gpm ssl crypto bsd)
+endif()
+
+set( LLVM_LINK_COMPONENTS
+  ${LLVM_TARGETS_TO_BUILD}
+  interpreter
+  asmparser
+  bitreader
+  bitwriter
+  codegen
+  ipo
+  selectiondag
+  bitreader
+  mc
+  mcjit
+  core
+  mcdisassembler
+  executionengine
+  option
+  )
+
+if ( NOT LLDB_DISABLE_PYTHON )
+  set(LLDB_WRAP_PYTHON ${LLDB_BINARY_DIR}/scripts/LLDBWrapPython.cpp)
+
+  set_source_files_properties(${LLDB_WRAP_PYTHON} PROPERTIES GENERATED 1)
+  if (LLVM_COMPILER_IS_GCC_COMPATIBLE AND
+      NOT "${CMAKE_SYSTEM_NAME}" MATCHES "Darwin")
+    set_property(SOURCE ${LLDB_WRAP_PYTHON}
+                 APPEND_STRING PROPERTY COMPILE_FLAGS " -Wno-sequence-point")
+  endif ()
+endif()
diff -ruN lldb-3.6.2.src/source/CMakeLists.txt lldb-3.6.2.src.patched/source/CMakeLists.txt
--- lldb-3.6.2.src/source/CMakeLists.txt	2014-12-29 13:42:33.000000000 +0100
+++ lldb-3.6.2.src.patched/source/CMakeLists.txt	2015-08-19 01:37:54.659931842 +0200
@@ -30,6 +30,10 @@
 if (NOT CMAKE_SYSTEM_NAME MATCHES "Windows" )
   add_subdirectory(API)
 endif ()
+
+if (BUILD_SHARED_LIBS)
+  set(SHARED_LIBRARY 1)
+endif()
 add_subdirectory(Breakpoint)
 add_subdirectory(Commands)
 add_subdirectory(Core)
diff -ruN lldb-3.6.2.src/tools/lldb-gdbserver/CMakeLists.txt lldb-3.6.2.src.patched/tools/lldb-gdbserver/CMakeLists.txt
--- lldb-3.6.2.src/tools/lldb-gdbserver/CMakeLists.txt	2015-06-23 17:40:10.000000000 +0200
+++ lldb-3.6.2.src.patched/tools/lldb-gdbserver/CMakeLists.txt	2015-08-19 01:49:17.983969729 +0200
@@ -16,28 +16,35 @@
 include_directories(../../source)
 
 include(../../cmake/LLDBDependencies.cmake)
-
-# have to include lldb and lldb-log files since those are not libraries and llgs depends on them
-add_lldb_executable(lldb-gdbserver
-  lldb-gdbserver.cpp
-  ../../source/lldb-log.cpp
-  ../../source/lldb.cpp
-  )
-
-# The Darwin linker doesn't understand --start-group/--end-group.
-if (LLVM_COMPILER_IS_GCC_COMPATIBLE AND NOT "${CMAKE_SYSTEM_NAME}" MATCHES "Darwin")
-  target_link_libraries(lldb-gdbserver
-                        -Wl,--start-group ${LLDB_USED_LIBS} -Wl,--end-group)
-  target_link_libraries(lldb-gdbserver
-                        -Wl,--start-group ${CLANG_USED_LIBS} -Wl,--end-group)
-else()
-  target_link_libraries(lldb-gdbserver ${LLDB_USED_LIBS})
+ 
+if ( BUILD_SHARED_LIBS )
+  add_lldb_executable(lldb-gdbserver
+    lldb-gdbserver.cpp
+    )
+ 
+  target_link_libraries(lldb-gdbserver liblldb)
+ else()
+
+  # have to include lldb and lldb-log files since those are not libraries and llgs depends on them
+  add_lldb_executable(lldb-gdbserver
+    lldb-gdbserver.cpp
+    ../../source/lldb-log.cpp
+    ../../source/lldb.cpp
+    )
+
+  # The Darwin linker doesn't understand --start-group/--end-group.
+  if (LLVM_COMPILER_IS_GCC_COMPATIBLE AND NOT "${CMAKE_SYSTEM_NAME}" MATCHES "Darwin")
+    target_link_libraries(lldb-gdbserver
+                          -Wl,--start-group ${LLDB_USED_LIBS} -Wl,--end-group)
+  else()
+    target_link_libraries(lldb-gdbserver ${LLDB_USED_LIBS})
+  endif()
   target_link_libraries(lldb-gdbserver ${CLANG_USED_LIBS})
-endif()
-llvm_config(lldb-gdbserver ${LLVM_LINK_COMPONENTS})
-
-target_link_libraries(lldb-gdbserver ${LLDB_SYSTEM_LIBS})
+  llvm_config(lldb-gdbserver ${LLVM_LINK_COMPONENTS})
 
+  target_link_libraries(lldb-gdbserver ${LLDB_SYSTEM_LIBS})
+endif()
+ 
 set_target_properties(lldb-gdbserver PROPERTIES VERSION ${LLDB_VERSION})
 
 install(TARGETS lldb-gdbserver
diff -ruN lldb-3.6.2.src/tools/lldb-gdbserver/CMakeLists.txt.orig lldb-3.6.2.src.patched/tools/lldb-gdbserver/CMakeLists.txt.orig
--- lldb-3.6.2.src/tools/lldb-gdbserver/CMakeLists.txt.orig	1970-01-01 01:00:00.000000000 +0100
+++ lldb-3.6.2.src.patched/tools/lldb-gdbserver/CMakeLists.txt.orig	2015-08-19 01:37:54.659931842 +0200
@@ -0,0 +1,44 @@
+set(LLVM_NO_RTTI 1)
+
+if ( CMAKE_SYSTEM_NAME MATCHES "Linux" )
+include_directories(
+  ../../source/Plugins/Process/Linux
+  ../../source/Plugins/Process/POSIX
+  )
+endif ()
+
+if ( CMAKE_SYSTEM_NAME MATCHES "FreeBSD" )
+include_directories(
+  ../../source/Plugins/Process/FreeBSD
+  ../../source/Plugins/Process/POSIX
+  )
+endif ()
+include_directories(../../source)
+
+include(../../cmake/LLDBDependencies.cmake)
+
+# have to include lldb and lldb-log files since those are not libraries and llgs depends on them
+add_lldb_executable(lldb-gdbserver
+  lldb-gdbserver.cpp
+  ../../source/lldb-log.cpp
+  ../../source/lldb.cpp
+  )
+
+# The Darwin linker doesn't understand --start-group/--end-group.
+if (LLVM_COMPILER_IS_GCC_COMPATIBLE AND NOT "${CMAKE_SYSTEM_NAME}" MATCHES "Darwin")
+  target_link_libraries(lldb-gdbserver
+                        -Wl,--start-group ${LLDB_USED_LIBS} -Wl,--end-group)
+  target_link_libraries(lldb-gdbserver
+                        -Wl,--start-group ${CLANG_USED_LIBS} -Wl,--end-group)
+else()
+  target_link_libraries(lldb-gdbserver ${LLDB_USED_LIBS})
+  target_link_libraries(lldb-gdbserver ${CLANG_USED_LIBS})
+endif()
+llvm_config(lldb-gdbserver ${LLVM_LINK_COMPONENTS})
+
+target_link_libraries(lldb-gdbserver ${LLDB_SYSTEM_LIBS})
+
+set_target_properties(lldb-gdbserver PROPERTIES VERSION ${LLDB_VERSION})
+
+install(TARGETS lldb-gdbserver
+  RUNTIME DESTINATION bin)
diff -ruN lldb-3.6.2.src/tools/lldb-mi/CMakeLists.txt lldb-3.6.2.src.patched/tools/lldb-mi/CMakeLists.txt
--- lldb-3.6.2.src/tools/lldb-mi/CMakeLists.txt	2014-08-08 18:47:42.000000000 +0200
+++ lldb-3.6.2.src.patched/tools/lldb-mi/CMakeLists.txt	2015-08-19 01:37:54.659931842 +0200
@@ -164,7 +164,7 @@
   )
 endif ()
 
-target_link_libraries(lldb-mi liblldb)
+target_link_libraries(lldb-mi liblldb pthread)
 # TODO: why isn't this done by add_lldb_executable?
 #target_link_libraries(lldb-mi ${LLDB_USED_LIBS})
 #llvm_config(lldb-mi ${LLVM_LINK_COMPONENTS})
