diff -Naupr a/tools/clang/lib/Driver/Tools.cpp b/tools/clang/lib/Driver/Tools.cpp
--- a/tools/clang/lib/Driver/Tools.cpp	2013-06-20 16:07:00.963603781 -0400
+++ b/tools/clang/lib/Driver/Tools.cpp	2013-06-20 16:21:21.170717583 -0400
@@ -2038,8 +2038,8 @@ void Clang::ConstructJob(Compilation &C,
   CheckCodeGenerationOptions(D, Args);
 
   bool PIE = getToolChain().isPIEDefault();
-  bool PIC = PIE || getToolChain().isPICDefault();
-  bool IsPICLevelTwo = PIC;
+  bool pic = PIE || getToolChain().isPICDefault();
+  bool IsPICLevelTwo = pic;
 
   // For the PIC and PIE flag options, this logic is different from the
   // legacy logic in very old versions of GCC, as that logic was just
@@ -2061,12 +2061,12 @@ void Clang::ConstructJob(Compilation &C,
       if (O.matches(options::OPT_fPIC) || O.matches(options::OPT_fpic) ||
           O.matches(options::OPT_fPIE) || O.matches(options::OPT_fpie)) {
         PIE = O.matches(options::OPT_fPIE) || O.matches(options::OPT_fpie);
-        PIC = PIE || O.matches(options::OPT_fPIC) ||
+        pic = PIE || O.matches(options::OPT_fPIC) ||
               O.matches(options::OPT_fpic);
         IsPICLevelTwo = O.matches(options::OPT_fPIE) ||
                         O.matches(options::OPT_fPIC);
       } else {
-        PIE = PIC = false;
+        PIE = pic = false;
       }
     }
   }
@@ -2075,7 +2075,7 @@ void Clang::ConstructJob(Compilation &C,
   // specified while enabling PIC enabled level 1 PIC, just force it back to
   // level 2 PIC instead. This matches the behavior of Darwin GCC (based on my
   // informal testing).
-  if (PIC && getToolChain().getTriple().isOSDarwin())
+  if (pic && getToolChain().getTriple().isOSDarwin())
     IsPICLevelTwo |= getToolChain().isPICDefault();
 
   // Note that these flags are trump-cards. Regardless of the order w.r.t. the
@@ -2084,9 +2084,9 @@ void Clang::ConstructJob(Compilation &C,
   if (KernelOrKext &&
       (Triple.getOS() != llvm::Triple::IOS ||
        Triple.isOSVersionLT(6)))
-    PIC = PIE = false;
+    pic = PIE = false;
   if (Args.hasArg(options::OPT_static))
-    PIC = PIE = false;
+    pic = PIE = false;
 
   if (Arg *A = Args.getLastArg(options::OPT_mdynamic_no_pic)) {
     // This is a very special mode. It trumps the other modes, almost no one
@@ -2111,9 +2111,9 @@ void Clang::ConstructJob(Compilation &C,
     // Currently, LLVM only knows about PIC vs. static; the PIE differences are
     // handled in Clang's IRGen by the -pie-level flag.
     CmdArgs.push_back("-mrelocation-model");
-    CmdArgs.push_back(PIC ? "pic" : "static");
+    CmdArgs.push_back(pic ? "pic" : "static");
 
-    if (PIC) {
+    if (pic) {
       CmdArgs.push_back("-pic-level");
       CmdArgs.push_back(IsPICLevelTwo ? "2" : "1");
       if (PIE) {
