           SPELL=itcl
         VERSION=4.0.4
          SOURCE="${SPELL}${VERSION}.tar.gz"
   SOURCE_URL[0]=http://downloads.sourceforge.net/project/incrtcl/%5Bincr%20Tcl_Tk%5D-4-source/$SPELL%20$VERSION/$SOURCE
     SOURCE_HASH=sha512:8cc1059501a1a3dd4633aef5cea8664abbf76bff51bd130ef7d8fc973c6a66cdb3716676512dbfd7f587e84c618f7ca92b67e0a2cf8dc7b03f2085858db37da0
SOURCE_DIRECTORY="${BUILD_DIRECTORY}/${SPELL}${VERSION}"
        WEB_SITE="http://incrtcl.sourceforge.net/itcl/"
      LICENSE[0]=BSD
         ENTERED=20130113
           SHORT="object oriented Tcl"
cat << EOF
Applications built with Tcl/Tk come together with relative ease. A sticky
note facility can be put together in an hour. A simple video game can be
created in an afternoon. But as applications get larger, Tcl/Tk code becomes
more and more difficult to understand, maintain and extend.

[incr Tcl] provides the extra language support needed to build large Tcl/Tk
applications. It introduces the notion of objects, which act as building blocks
for an application. Each object is a bag of data with a set of procedures or
"methods" that are used to manipulate it. Objects are organized into "classes"
with identical characteristics, and classes can inherit functionality from
one another. This object-oriented paradigm adds another level of organization
on top of the basic variable/procedure elements, and the resulting code is
easier to understand and maintain.
EOF
