           SPELL=oclint
           TMPFS=off
         VERSION=0.6
   MINOR_VERSION=0.110
    LLVM_VERSION=3.2
          SOURCE="${SPELL}-${VERSION}.src.tar.gz"
   SOURCE_URL[0]=http://archives.${SPELL}.org/releases/0.6/${SOURCE}
     SOURCE_HASH=sha512:36025b0f350317c64bac1fde940d2f1c924f275d63402d2d2558cd7d0a2c8c907aa7d65455493fbca4e122619acc9d63506a6a54038fcff340ca2527f6288a3a
         SOURCE2=llvm-${LLVM_VERSION}.src.tar.gz
  SOURCE2_URL[0]=http://llvm.org/releases/${LLVM_VERSION}/${SOURCE2}
    SOURCE2_HASH=sha512:cc66171322dbbe40bcac0e0ea5b09df8ff52df63ded304f841f32f702270d6ab1512216413ee52498c3ebee8cd39c4cd23e3855d591944bc2ac0ae76f5be62cc
         SOURCE3="clang-${LLVM_VERSION}.src.tar.gz"
  SOURCE3_URL[0]="http://llvm.org/releases/${LLVM_VERSION}/${SOURCE3}"
    SOURCE3_HASH=sha512:99fc57d19b76c42af9821eaaa762056a926eb68178f6b7dd5e8bf092c9ee201a554b91d760d5a30a57f38102eae340e080ef8c6a39327f6881eda391b20b108d
SOURCE_DIRECTORY="${BUILD_DIRECTORY}/${SPELL}-${VERSION}.${MINOR_VERSION}"
        WEB_SITE="http://oclint.org/"
      LICENSE[0]=BSD
         ENTERED=20130528
           SHORT="a static code analysis tool for improving quality and reducing defects in C/C++ code"
cat << EOF
OCLint is a static code analysis tool for improving quality and reducing
defects by inspecting C, C++ and Objective-C code and looking for potential
problems like:

  * Possible bugs - empty if/else/try/catch/finally statements * Unused
  code - unused local variables and parameters * Complicated code - high
  cyclomatic complexity, NPath complexity and high NCSS * Redundant code -
  redundant if statement and useless parentheses * Code smells - long method
  and long parameter list * Bad practices - inverted logic and parameter
  reassignment * ...

Static code analysis is a critical technique to detect defects that aren't
visible to compilers. OCLint automates this inspection process with advanced
features:

  * Relying on the abstract syntax tree of the source code for better accuracy
    and efficiency; False positives are mostly reduced to avoid useful
    results sinking in them.
  * Dynamically loading rules into system, even in the runtime.  * Flexible
  and extensible configurations ensure users in customizing the
    behaviors of the tool.
  * Command line invocation facilitates continuous integration and continuous
    inspection of the code while being developed, so that technical debts
    can be fixed early on to reduce the maintenance cost.
EOF
