           SPELL=openfst
          SPELLX=OpenFst
         VERSION=beta-20070801
     SOURCE_HASH=sha512:842b0bf5c97f8ce19338cda0896d21d265e935f4dae9a53f502a7499a25f60e99ce0f2331f8f5b8042b0b2da4147b8847ca3b36103df7bdcb083ba3553f5c8e7
          SOURCE=$SPELLX-$VERSION.tgz
SOURCE_DIRECTORY=$BUILD_DIRECTORY/$SPELLX
        WEB_SITE=http://www.openfst.org/
   SOURCE_URL[0]=http://128.122.80.210/~openfst/twiki/pub/FST/FstDownload/$SOURCE
      LICENSE[0]=APACHE
         ENTERED=20071101
        KEYWORDS="library pattern"
           SHORT="Weighted finite-state transducers"
cat << EOF
OpenFst is a library for constructing, combining, optimizing, and searching 
weighted finite-state transducers (FSTs). Weighted finite-state transducers 
are automata where each transition has an input label, an output label, and 
a weight. The more familiar finite-state acceptor is represented as a 
transducer with each transition's input and output label equal. Finite-state 
acceptors are used to represent sets of strings (specifically, regular or 
rational sets); finite-state transducers are used to represent binary relations 
between pairs of strings (specifically, rational transductions). The weights 
can be used to represent the cost of taking a particular transition. 
 FSTs have key applications in speech recognition and synthesis, machine 
translation, optical character recognition, pattern matching, string 
processing, machine learning, information extraction and retrieval among 
others. Often a weighted transducer is used to represent a probabilistic model 
(e.g., an n-gram model, pronunciation model). FSTs can be optimized by 
determinization and minimization, models can be applied to hypothesis sets 
(also represented as automata) or cascaded by finite-state composition, and the 
best results can be selected by shortest-path algorithms.
EOF
