           SPELL=openfst
         VERSION=1.3.2
     SOURCE_HASH=sha512:e346bb908fd6a4f85d41a6f573f301be59dafc1804372390ed6721b54955563a74c7df6a2d80801c043464f54f7a6ddbf0588dd2a986294f3cd9ce8b4ea197e7
          SOURCE=$SPELL-$VERSION.tar.gz
SOURCE_DIRECTORY=$BUILD_DIRECTORY/$SPELL-$VERSION
        WEB_SITE=http://www.openfst.org
   SOURCE_URL[0]=$WEB_SITE/twiki/pub/FST/FstDownload/$SOURCE
      LICENSE[0]=APACHE
         ENTERED=20071101
        KEYWORDS="library pattern"
           SHORT="Weighted finite-state transducers"
cat << EOF
OpenFst is a library for constructing, combining, optimizing, and searching 
weighted finite-state transducers (FSTs). Weighted finite-state transducers 
are automata where each transition has an input label, an output label, and 
a weight. The more familiar finite-state acceptor is represented as a 
transducer with each transition's input and output label equal. Finite-state 
acceptors are used to represent sets of strings (specifically, regular or 
rational sets); finite-state transducers are used to represent binary relations 
between pairs of strings (specifically, rational transductions). The weights 
can be used to represent the cost of taking a particular transition. 
 FSTs have key applications in speech recognition and synthesis, machine 
translation, optical character recognition, pattern matching, string 
processing, machine learning, information extraction and retrieval among 
others. Often a weighted transducer is used to represent a probabilistic model 
(e.g., an n-gram model, pronunciation model). FSTs can be optimized by 
determinization and minimization, models can be applied to hypothesis sets 
(also represented as automata) or cascaded by finite-state composition, and the 
best results can be selected by shortest-path algorithms.
EOF
