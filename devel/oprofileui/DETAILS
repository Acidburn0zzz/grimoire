           SPELL=oprofileui
         VERSION=0.2.0
          SOURCE="${SPELL}-${VERSION}.tar.gz"
   SOURCE_URL[0]=http://labs.o-hand.com/sources/${SPELL}/${SOURCE}
     SOURCE_HASH=sha512:b4b78652ca197719d0849e32918e3922737f7f605df091cf786312b7e106ea8816a0965f29b8878421ae2b957c15100035f5b00db6268c3507a29a14fbf52e3c
SOURCE_DIRECTORY="${BUILD_DIRECTORY}/${SPELL}-${VERSION}"
        WEB_SITE="http://labs.o-hand.com/oprofileui"
      LICENSE[0]=GPL
         ENTERED=20101125
           SHORT="a user interface to the stochastic system profiler"
cat << EOF
Client/server model allowing the resource intensive profile generation to be
completed off-target. This allows the profiling of resource limited targets,
for instance embedded devices, from the comfort of a desktop system.

Wide range of hardware support. By basing this interface on OProfile we can
support all architectures supported by OProfile. However our primary design
platform is with ARM and x86 targets and x86 host.

Support for detailed profiling, including call-graph generation.

No need for extra instrumentation. With OProfile applications need no extra
build-time instrumentation to be profileable. The only requirement is that
the binaries of interest have debugging symbols 1).

Intuitive visual interface. By using colour to indicate resource usage
along it makes it easy for the developer to see the resource usage at a
glance. Combined with clear visual modes it is easy to identify the busiest
applications on the system, the busiest libraries and the busiest symbols
and drill down within those to find more detailed information.
EOF
