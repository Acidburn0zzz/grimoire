           SPELL=ocamlgraph
         VERSION=1.8.1
          SOURCE="${SPELL}-${VERSION}.tar.gz"
   SOURCE_URL[0]=http://${SPELL}.lri.fr/download/${SOURCE}
     SOURCE_HASH=sha512:8e2aab51afd096979e3e062a86eaa1445c4cd84baf7f45bff01897ef03a9d154eacf51f494212c1a5859f83f8521584679069f9bf604f2eccb4714ebf71ab6a8
SOURCE_DIRECTORY="${BUILD_DIRECTORY}/${SPELL}-${VERSION}"
        WEB_SITE="http://ocamlgraph.lri.fr"
      LICENSE[0]=GPL
         ENTERED=20120302
           SHORT="a graph library for Objective Caml"
cat << EOF
ocamlgraph is a graph library for Objective Caml. Its contribution is
three-fold:

* It provides an easy-to-use graph data structure together with several
  operations and algorithms over graphs. It is a reasonably efficient
  imperative data structure for directed graphs with vertices and edges
  labeled with integers.

* Ocamlgraph provides several other graph implementations for those not
  satisfied with the one above. Some are persistent (imutable) and other
  imperative (mutable). Some are directed and other are not. Some have labels
  for vertices, or labels for edges, or both. Some have abstract types for
  vertices. etc.

  These implementations are written as functors: you give the types of vertices
  labels, edge labels, etc. and you get the data structure as a result.

* Finally, ocamlgraph provides several classic operations and algorithms over
  graphs. They are also written as functors i.e. independently of the data
  structure for graphs. One consequence is that you can define your own data
  structure for graphs and yet re-use all the algorithms from this library
  -- you only need to provide a few operations such as iterating over all
  vertices, over the successors of a vertex, etc.
EOF
