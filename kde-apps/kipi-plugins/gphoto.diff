--- /usr/src/kipi-plugins-0.1.3-beta1/kipi-plugins/kameraklient/gpcamera.cpp	2006-12-06 21:06:53.000000000 +0100
+++ gpcamera.cpp	2006-12-14 20:59:59.000000000 +0100
@@ -202,7 +202,7 @@
 }
 
 int GPCamera::getSubFolders(const QString& folder, QValueList<QString>& subFolderList) {
-    ::CameraList *clist;
+    CameraList *clist;
     gp_list_new(&clist);
     if (status) {
         delete status;
@@ -250,7 +250,7 @@
 }
 
 int GPCamera::getItemsInfo(const QString& folder, GPFileItemInfoList& infoList) {
-    ::CameraList *clist;
+    CameraList *clist;
     const char *cname;
     if (status) {
         delete status;
@@ -561,35 +561,39 @@
 }
 
 int GPCamera::autoDetect(QString& model, QString& port) {
-    ::CameraList camList;
+    CameraList *pCamList;
     CameraAbilitiesList *abilList;
     GPPortInfoList *infoList;
     const char *camModel_, *camPort_;
     GPContext *context;
 
     context = gp_context_new ();
+    gp_list_new(&pCamList);
 
     gp_abilities_list_new (&abilList);
     gp_abilities_list_load (abilList, context);
     gp_port_info_list_new (&infoList);
     gp_port_info_list_load (infoList);
-    gp_abilities_list_detect (abilList, infoList, &camList, context);
+    gp_abilities_list_detect (abilList, infoList, pCamList, context);
     gp_abilities_list_free (abilList);
     gp_port_info_list_free (infoList);
 
     gp_context_unref( context );
 
-    int count = gp_list_count (&camList);
+    int count = gp_list_count (pCamList);
 
     if (count<=0) {
+        gp_list_free(pCamList);
         return -1;
     }
     for (int i = 0; i < count; i++) {
-        gp_list_get_name  (&camList, i, &camModel_);
-        gp_list_get_value (&camList, i, &camPort_);
+        gp_list_get_name  (pCamList, i, &camModel_);
+        gp_list_get_value (pCamList, i, &camPort_);
     }
     model = camModel_;
     port  = camPort_;
+    gp_list_free(pCamList);
+
     return 0;
 }
 
--- /usr/src/kipi-plugins-0.1.3-beta1/kipi-plugins/kameraklient/gpiface.cpp	2006-11-30 00:08:00.000000000 +0100
+++ gpiface.cpp	2006-12-14 21:30:06.000000000 +0100
@@ -19,13 +19,17 @@
  * 
  * ============================================================ */
 
-// Qt
-#include <qstring.h>
-#include <qstringlist.h>
 // GPhoto2
-extern "C" {
+
+extern "C" 
+{
 #include <gphoto2.h>
 }
+
+// Qt
+#include <qstring.h>
+#include <qstringlist.h>
+
 // Local
 #include "gpiface.h"
 
@@ -33,37 +37,40 @@
 {
 
 int GPIface::autoDetect(QString& model, QString& port) {
-    ::CameraList camList;
+    CameraList *pCamList;
     CameraAbilitiesList *abilList;
     GPPortInfoList *infoList;
     const char *camModel_, *camPort_;
     GPContext *context;
 
     context = gp_context_new ();
+    gp_list_new(&pCamList);
 
     gp_abilities_list_new (&abilList);
     gp_abilities_list_load (abilList, context);
     gp_port_info_list_new (&infoList);
     gp_port_info_list_load (infoList);
-    gp_abilities_list_detect (abilList, infoList, &camList, context);
+    gp_abilities_list_detect (abilList, infoList, pCamList, context);
     gp_abilities_list_free (abilList);
     gp_port_info_list_free (infoList);
 
     gp_context_unref( context );
 
-    int count = gp_list_count (&camList);
+    int count = gp_list_count (pCamList);
 
     if (count<=0) {
+        gp_list_free(pCamList);
         return -1;
     }
 
     for (int i = 0; i < count; i++) {
-        gp_list_get_name  (&camList, i, &camModel_);
-        gp_list_get_value (&camList, i, &camPort_);
+        gp_list_get_name  (pCamList, i, &camModel_);
+        gp_list_get_value (pCamList, i, &camPort_);
     }
 
     model = camModel_;
     port  = camPort_;
+    gp_list_free(pCamList);
 
     return 0;
 }
