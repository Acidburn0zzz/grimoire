           SPELL=sql-statement
          SPELLX=SQL-Statement
         VERSION=1.405
          SOURCE=${SPELLX}-${VERSION}.tar.gz
   SOURCE_URL[0]=$PERL_CPAN_URL/CPAN/authors/id/R/RE/REHSACK/${SOURCE}
     SOURCE_HASH=sha512:e7aa4cd9c300d3638e07e078c09d0e551fe799311b871f1a669efd4bf3f4675068895f86d15b852aa0230decacc3f019ad55a2972d0d298813ca189e9b57281b
SOURCE_DIRECTORY="${BUILD_DIRECTORY}/${SPELLX}-${VERSION}"
         LICENSE=ART
        WEB_SITE=http://search.cpan.org/dist/SQL-Statement/
         ENTERED=20150417
        KEYWORDS="perl sql"
           SHORT="SQL parsing and processing engine"
cat << EOF
The SQL::Statement module implements a pure Perl SQL parsing and execution
engine. While it by no means implements full ANSI standard, it does support
many features including column and table aliases, built-in and user-defined
functions, implicit and explicit joins, complex nested search conditions, and
other features.

SQL::Statement is a small embeddable Database Management System (DBMS).

This means that it provides all of the services of a simple DBMS except that
instead of a persistent storage mechanism, it has two things:

1) an in-memory storage mechanism that allows you to prepare, execute, and fetch
from SQL statements using temporary tables;
2) a set of software sockets where any author can plug in any storage mechanism.

There are three main uses for SQL::Statement. One or another (hopefully not all)
may be irrelevant for your needs:

1) to access and manipulate data in CSV, XML, and other formats;
2) to build your own DBD for a new data source;
3) to parse and examine the structure of SQL statements.
EOF
