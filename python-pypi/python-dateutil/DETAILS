           SPELL=python-dateutil
if  [  "$PYTHON_DATEUTIL_BRANCH"  ==  "python2"  ];  then
         VERSION=1.5
          SOURCE="${SPELL}-${VERSION}.tar.gz"
      SOURCE_GPG="gurus.gpg:${SOURCE}.sig"
else
         VERSION=2.0
          SOURCE="${SPELL}-${VERSION}.tar.gz"
     SOURCE_HASH=sha512:49571d2244fbfb8c3f5e9746f20ec7272ff7fb5d2d738403382d5aee063b88b64440084ab5c311973072e2d7f6cf5c6557990eed9ba20cf0c4321cf72c8a05a5
fi
   SOURCE_URL[0]=http://labix.org/download/${SPELL}/${SOURCE}
SOURCE_DIRECTORY="${BUILD_DIRECTORY}/${SPELL}-${VERSION}"
        WEB_SITE="http://labix.org/python-dateutil"
      LICENSE[0]=PYTHON
         ENTERED=20090313
           SHORT="The dateutil module provides powerful extensions to the standard datetime module"
cat << EOF
The dateutil module provides powerful extensions to the standard datetime
module, available in Python 2.3+.  Computing of relative deltas (next month,
next year, next monday, last week of month, etc); Computing of relative
deltas between two given date and/or datetime objects; Computing of dates
based on very flexible recurrence rules, using a superset of the iCalendar
specification. Parsing of RFC strings is supported as well.  Generic parsing
of dates in almost any string format; Timezone (tzinfo) implementations
for tzfile(5) format files (/etc/localtime, /usr/share/zoneinfo, etc),
TZ environment string (in all known formats), iCalendar format files,
given ranges (with help from relative deltas), local machine timezone,
fixed offset timezone, UTC timezone, and Windows registry-based time zones.
Internal up-to-date world timezone information based on Olson's database.
Computing of Easter Sunday dates for any given year, using Western, Orthodox
or Julian algorithms; More than 400 test cases.
EOF
