--- glib/src/rbglib_maincontext.c.orig	2006/12/10 17:24:22	1.10
+++ glib/src/rbglib_maincontext.c	2007/08/30 10:13:44	1.13
@@ -3,8 +3,8 @@
 
   rbglib_maincontext.c -
 
-  $Author: mutoh $
-  $Date: 2006/12/10 17:24:22 $
+  $Author: ktou $
+  $Date: 2007/08/30 10:13:44 $
 
   Copyright (C) 2005 Masao Mutoh
 ************************************************/
@@ -54,7 +54,7 @@
     callback_info_t *info = (callback_info_t *)data;
     gboolean ret;
 
-    ret = RTEST(rb_funcall(info->callback, id_call, 0));
+    ret = RVAL2CBOOL(rb_funcall(info->callback, id_call, 0));
     if (!ret)
         G_REMOVE_RELATIVE(mGLibSource, id__callbacks__, UINT2NUM(info->id));
     return ret;
@@ -95,7 +95,7 @@
 mc_iteration(self, may_block)
     VALUE self, may_block;
 {
-    return CBOOL2RVAL(g_main_context_iteration(_SELF(self), RTEST(may_block)));
+    return CBOOL2RVAL(g_main_context_iteration(_SELF(self), RVAL2CBOOL(may_block)));
 }
 
 static VALUE
@@ -253,7 +253,7 @@
 mc_set_poll_func(self)
     VALUE self;
 {
-    rb_ivar_set(self, id_poll_func, G_BLOCK_PROC());
+    rb_ivar_set(self, id_poll_func, rb_block_proc());
     g_main_context_set_poll_func(_SELF(self), (GPollFunc)poll_func);
 
     return self;
@@ -331,19 +331,23 @@
 
 #if GLIB_CHECK_VERSION(2,14,0)
 static VALUE
-timeout_add_seconds(VALUE self, VALUE interval)
+timeout_add_seconds(int argc, VALUE *argv, VALUE self)
 {
-    VALUE func, rb_id;
+    VALUE interval, rb_priority, func, rb_id;
+    gint priority;
     callback_info_t *info;
     guint id;
 
-    func = G_BLOCK_PROC();
+    rb_scan_args(argc, argv, "11&", &interval, &rb_priority, &func);
 
+    priority = NIL_P(rb_priority) ? G_PRIORITY_DEFAULT : INT2NUM(rb_priority);
     info = ALLOC(callback_info_t);
     info->callback = func;
-    id = g_timeout_add_seconds(NUM2UINT(interval),
-                               (GSourceFunc)invoke_source_func,
-                               (gpointer)info, g_free);
+    id = g_timeout_add_seconds_full(priority,
+                                    NUM2UINT(interval),
+                                    (GSourceFunc)invoke_source_func,
+                                    (gpointer)info,
+                                    g_free);
     info->id = id;
     rb_id = UINT2NUM(id);
     G_RELATIVE2(mGLibSource, func, id__callbacks__, rb_id);
@@ -372,15 +376,15 @@
 
     rb_scan_args(argc, argv, "02", &arg1, &arg2);
 
-    if (RTEST(rb_obj_is_kind_of(arg1, rb_cProc))) {
+    if (RVAL2CBOOL(rb_obj_is_kind_of(arg1, rb_cProc))) {
         priority = G_PRIORITY_DEFAULT;
         func = arg1;
-    } else if (RTEST(rb_obj_is_kind_of(arg1, rb_cInteger))) {
+    } else if (RVAL2CBOOL(rb_obj_is_kind_of(arg1, rb_cInteger))) {
         priority = NUM2INT(arg1);
-        func = G_BLOCK_PROC();
+        func = rb_block_proc();
     } else {
         priority = G_PRIORITY_DEFAULT;
-        func = G_BLOCK_PROC();
+        func = rb_block_proc();
     }
 
     info = ALLOC(callback_info_t);
@@ -427,7 +431,7 @@
 child_watch_add(self, pid)
     VALUE self, pid;
 {
-    VALUE func = G_BLOCK_PROC();
+    VALUE func = rb_block_proc();
     G_RELATIVE(self, func);
     return UINT2NUM(g_child_watch_add((GPid)NUM2INT(pid), 
                                       (GChildWatchFunc)child_watch_func, (gpointer)func));
@@ -488,7 +492,7 @@
 #endif
     rb_define_module_function(timeout, "add", timeout_add, -1);
 #if GLIB_CHECK_VERSION(2,14,0)
-    rb_define_module_function(timeout, "add_seconds", timeout_add_seconds, 1);
+    rb_define_module_function(timeout, "add_seconds", timeout_add_seconds, -1);
 #endif
     rb_define_module_function(idle, "source_new", idle_source_new, 0);
     rb_define_module_function(idle, "add", idle_add, -1);
