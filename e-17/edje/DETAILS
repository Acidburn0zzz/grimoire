           SPELL=edje
if [[ "$EDJE_BRANCH" == "scm" ]]; then
  if [[ "$EDJE_AUTOUPDATE" == "y" ]; then
         VERSION=$(date +%Y%m%d)
  else
         VERSION=svn
  fi
          SOURCE=$SPELL-svn.tar.bz2
  FORCE_DOWNLOAD=on
SOURCE_DIRECTORY=$BUILD_DIRECTORY/$SPELL-svn
   SOURCE_URL[0]=svn_http://svn.enlightenment.org/svn/e/trunk/$SPELL:$SPELL
   SOURCE_IGNORE=volatile
      PATCHLEVEL=1
else
         VERSION=1.0.0 
          SOURCE=$SPELL-$VERSION.tar.gz
SOURCE_DIRECTORY=$BUILD_DIRECTORY/$SPELL-$VERSION
   SOURCE_URL[0]=http://download.enlightenment.org/releases/$SOURCE
     SOURCE_HASH=sha512:852b13e3644ed4899db3d4415e2394f3fb32e4fddf4bfc351488a69df9f9db813419c009cb477981be851663f4b3bd5046b6f3e83513fcd53bf1f4fc2824e9df
fi
      LICENSE[0]=BSD
        WEB_SITE=http://enlightenment.org/Libraries/Edje/
         ENTERED=20040311
        KEYWORDS="enlightenment"
           SHORT='Enlightenment e17 graphical layout and animation library'
cat << EOF
Edje is a complex graphical design & layout library.

It's purpose is to be a sequel to "Ebits" which to date has serviced the needs
of Enlightenment development for version 0.17. The original design parameters
under which Ebits came about were a lot more restricted than the resulting use
of them, thus Edje was born.

Edje is a more complex layout engine compared to Ebits. It doesn't pretend to
do containering and regular layout like a widget set. It still inherits the
more simplistic layout ideas behind Ebits, but it now does them a lot more
cleanly, allowing for easy expansion, and the ability to cover much more ground
than Ebits ever could. For the purposes of Enlightenment 0.17, Edje should
serve all the purposes of creating visual elements (borders of windows,
scrollbars, etc.) and allow the designer the ability to animate, layout and
control the look and feel of any program using Edje as its basic GUI
constructor. This library allows for multiple collections of layouts in one
file, sharing the same image database and thus allowing a whole theme to be
conveneintly packaged into 1 file and shipped around.

Edje, unlike Ebits, separates the layout and behavior logic. Edje files ship
with an image database, used by all the parts in all the collections to source
graphical data. It has a directory of logical part names pointing to the part
collection entry ID in the file (thus allowing for multiple logical names to
point to the same part collection, allowing for the sharing of data between
display elements). Each part collection consists of a list of visual parts, as
well as a list of programs. A program is a conditionally run program that if a
particular event occurs (a button is pressed, a mouse enters or leaves a part)
will trigger an action that may affect other parts. In this way a part
collection can be "programmed" via its file as to hilight buttons when the
mouse passes over them or show hidden parts when a button is clicked somewhere
etc. The actions performed in changing from one state to another ar also
allowed to transition over a period of time, allowing animation.

This separation and simplistic event driven style of programming can produce
almost any look and feel one could want for basic visual elements. Anything
more complex is likely the domain of an application or widget set that may use
Edje as a convenient way of being able to configure parts of the display.

There's an alternative Edje compiler, written by E hacker Tilman Sauerbeck,
called Redact, that allows developers to write their Edjes using Ruby code
instead of the EDC code that edje_cc uses.
EOF
