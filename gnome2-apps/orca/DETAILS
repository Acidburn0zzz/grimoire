           SPELL=orca
         VERSION=2.28.2
	  BRANCH=`echo $VERSION|cut -d . -f 1,2`
          SOURCE=$SPELL-$VERSION.tar.bz2
SOURCE_DIRECTORY=$BUILD_DIRECTORY/$SPELL-$VERSION
   SOURCE_URL[0]=$GNOME_URL/sources/$SPELL/$BRANCH/$SOURCE
      SOURCE_GPG="gurus.gpg:${SOURCE}.sig"
      LICENSE[0]=GPL
        WEB_SITE=http://www.gnome.org
         ENTERED=20060902
        KEYWORDS="gnome2"
           SHORT="A scriptable screen reader"
cat << EOF
Orca is a scriptable screen reader for the GNOME desktop for people
with visual impairments.

One of the biggest challenges in screen reading technology is
providing a consistent user experience across multiple applications
which may use objects in different ways, and to allow quick access to
information which may not be easily accessible through an
application's keyboard navigation commands.  Orca explores how to
solve some of these difficulties.  Some common scenarios which Orca's
script-based architecture would be suited to solve:
* An application which displays text of interest to the user in a
  non-focusable object
* Create hot keys to be used in certain applications to collect and
  read various pieces of information
* Cause the Braille display to show status information retrieved from
  status bars or other objects in the application
Orca is written in primarily in Python.  Orca defines a set of default
behaviors (reactions to application events) and key bindings (reaction
to user key presses).  These default behaviors and key bindings can be
overwritten on a per-application basis.  Orca creates a script object
for each running application, which merges both the default behaviors
and key bindings with the application-specific ones.  Orca provides
the infrastructure to activate and deactivate scripts as well as a
host of services accessible from within the scripts.  Some of these
services include:
* A speech module which provides named voices definable by the user
* A braille module which uses BrlTTY to provide high-level
  braille services to scripts - these services include braille
  keyboard callback support, software-based virtual regions for the
  braille display, and scrolling management
* Convenience functions for finding the labels of objects, getting all the
  objects within a given object, etc.
EOF
