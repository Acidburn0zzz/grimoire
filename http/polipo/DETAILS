           SPELL=polipo
if [[ "${POLIPO_BRANCH}" == scm ]]; then
  if [[ "${POLIPO_AUTOUPDATE}" == y ]]; then
         VERSION=$(date +%Y%m%d)
  else
         VERSION=scm
  fi
          SOURCE=${SPELL}-git.tar.bz2
   SOURCE_URL[0]=git://github.com/jech/${SPELL}.git:${SPELL}-git
SOURCE_DIRECTORY="${BUILD_DIRECTORY}/${SPELL}-git"
   SOURCE_IGNORE=volatile
  FORCE_DOWNLOAD=on
else
         VERSION=1.1.1
          SOURCE=${SPELL}-${VERSION}.tar.gz
         SOURCE2=${SOURCE}.asc
   SOURCE_URL[0]=http://www.pps.univ-paris-diderot.fr/~jch/software/files/${SPELL}/${SOURCE}
  SOURCE2_URL[0]=${SOURCE_URL[0]}.asc
      SOURCE_GPG=polipo.gpg:${SOURCE2}:UPSTREAM_KEY
  SOURCE2_IGNORE=signature
SOURCE_DIRECTORY="${BUILD_DIRECTORY}/${SPELL}-${VERSION}"
fi
        WEB_SITE=http://www.pps.univ-paris-diderot.fr/~jch/software/polipo/
         ENTERED=20140416
      LICENSE[0]=MIT
        KEYWORDS="http proxy cache"
           SHORT="caching web proxy"
cat << EOF
Polipo is a small and fast caching web proxy (a web cache, an HTTP proxy, a
proxy server). While Polipo was designed to be used by one person or a small
group of people, there is nothing that prevents it from being used by a larger
group.

Polipo has some features that are unique among currently available proxies:

* Polipo will use HTTP/1.1 pipelining if it believes that the remote server
  supports it, whether the incoming requests are pipelined or come in
  simultaneously on multiple connections (this is more than the simple usage of
  persistent connections, which is done by e.g. Squid);
* Polipo will cache the initial segment of an instance if the download has been
  interrupted, and, if necessary, complete it later using Range requests;
* Polipo will upgrade client requests to HTTP/1.1 even if they come in as
  HTTP/1.0, and up- or downgrade server replies to the client's capabilities
  (this may involve conversion to or from the HTTP/1.1 chunked encoding);
* Polipo has complete support for IPv6 (except for scoped (link-local)
  addresses);
* Polipo can optionally use a technique known as Poor Man's Multiplexing to
  reduce latency even further.
EOF
