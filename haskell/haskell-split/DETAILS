           SPELL=haskell-split
         VERSION=0.2.2
          SOURCE="split-${VERSION}.tar.gz"
   SOURCE_URL[0]=https://hackage.haskell.org/package/split-${VERSION}/${SOURCE}
     SOURCE_HASH=sha512:d3e1a0d875632d15b12c0e454188382b705f2b9d93cb99d64f0a2a150ee7b7458628eff95da7da5f51fe9ed4ef3bd8ef3640f925f66e8f6f61253f679326614e
SOURCE_DIRECTORY="${BUILD_DIRECTORY}/split-${VERSION}"
        WEB_SITE="https://hackage.haskell.org/package/split"
      LICENSE[0]=BSD
         ENTERED=20150802
           SHORT="combinator library for splitting lists"
cat << EOF
A collection of various methods for splitting lists into parts, akin to the
"split" function found in several mainstream languages. Here is its tale:

Once upon a time the standard Data.List module held no function for splitting a
list into parts according to a delimiter. Many a brave lambda-knight strove
to add such a function, but their striving was in vain, for Lo, the Supreme
Council fell to bickering amongst themselves what was to be the essential
nature of the One True Function which could cleave a list in twain (or thrain,
or any required number of parts).

And thus came to pass the split package, comprising divers functions for
splitting a list asunder, each according to its nature. And the Supreme
Council had no longer any grounds for argument, for the favored method of
each was contained therein.

To get started, see the Data.List.Split module.
EOF
