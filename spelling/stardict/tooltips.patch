diff -Nuar stardict-3.0.0.orig/src/class_factory.cpp stardict-3.0.0/src/class_factory.cpp
--- stardict-3.0.0.orig/src/class_factory.cpp	2007-09-11 16:42:50.000000000 +0500
+++ stardict-3.0.0/src/class_factory.cpp	2007-09-11 17:45:05.000000000 +0500
@@ -61,12 +61,11 @@
 }
 
 TrayBase *PlatformFactory::create_tray_icon(GtkWidget *win, bool scan,
-					    GtkTooltips *tooltips,
 					    const AppSkin& skin)
 {
 #ifdef _WIN32
 	return new DockLet(win, scan);
 #else
-	return new DockLet(win, scan, tooltips, skin);
+	return new DockLet(win, scan, skin);
 #endif
 }
diff -Nuar stardict-3.0.0.orig/src/class_factory.hpp stardict-3.0.0/src/class_factory.hpp
--- stardict-3.0.0.orig/src/class_factory.hpp	2007-09-11 16:42:50.000000000 +0500
+++ stardict-3.0.0/src/class_factory.hpp	2007-09-11 17:46:13.000000000 +0500
@@ -10,7 +10,7 @@
 class PlatformFactory {
 public:
 	static void *create_class_by_name(const std::string& name, void *param=NULL);
-	static TrayBase *create_tray_icon(GtkWidget *, bool, GtkTooltips *, const AppSkin&);
+	static TrayBase *create_tray_icon(GtkWidget *, bool, const AppSkin&);
 };
 
 #endif//!_CLASS_FACTORY_HPP_
diff -Nuar stardict-3.0.0.orig/src/dictmanagedlg.cpp stardict-3.0.0/src/dictmanagedlg.cpp
--- stardict-3.0.0.orig/src/dictmanagedlg.cpp	2007-09-11 16:42:50.000000000 +0500
+++ stardict-3.0.0/src/dictmanagedlg.cpp	2007-09-11 17:24:18.000000000 +0500
@@ -1735,21 +1735,21 @@
 	button = gtk_button_new();
 	image = gtk_image_new_from_stock(GTK_STOCK_ADD, GTK_ICON_SIZE_BUTTON);
 	gtk_button_set_image(GTK_BUTTON(button), image);
-	gtk_tooltips_set_tip(gpAppFrame->tooltips,button,_("Add"),NULL);
+	gtk_widget_set_tooltip_text(button, _("Add"));
 	GTK_WIDGET_UNSET_FLAGS (button, GTK_CAN_FOCUS);
 	g_signal_connect(G_OBJECT(button),"clicked", G_CALLBACK(on_dictmanage_add_button_clicked), this);
 	gtk_box_pack_start (GTK_BOX (vbox), button, FALSE, FALSE, 0);
 	button = gtk_button_new();
 	image = gtk_image_new_from_stock(GTK_STOCK_DELETE, GTK_ICON_SIZE_BUTTON);
 	gtk_button_set_image(GTK_BUTTON(button), image);
-	gtk_tooltips_set_tip(gpAppFrame->tooltips,button,_("Delete"),NULL);
+	gtk_widget_set_tooltip_text(button, _("Delete"));
 	GTK_WIDGET_UNSET_FLAGS (button, GTK_CAN_FOCUS);
 	g_signal_connect(G_OBJECT(button),"clicked", G_CALLBACK(on_dictmanage_delete_button_clicked), this);
 	gtk_box_pack_start (GTK_BOX (vbox), button, FALSE, FALSE, 0);
 	button = gtk_button_new();
 	image = gtk_image_new_from_stock(GTK_STOCK_DIALOG_INFO, GTK_ICON_SIZE_BUTTON);
 	gtk_button_set_image(GTK_BUTTON(button), image);
-	gtk_tooltips_set_tip(gpAppFrame->tooltips,button,_("Information"),NULL);
+	gtk_widget_set_tooltip_text(button, _("Information"));
 	GTK_WIDGET_UNSET_FLAGS (button, GTK_CAN_FOCUS);
 	g_signal_connect(G_OBJECT(button),"clicked", G_CALLBACK(on_dictmanage_info_button_clicked), this);
 	gtk_box_pack_start (GTK_BOX (vbox), button, FALSE, FALSE, 0);
@@ -1758,28 +1758,28 @@
 	button = gtk_button_new();
 	image = gtk_image_new_from_stock(GTK_STOCK_GOTO_TOP, GTK_ICON_SIZE_BUTTON);
 	gtk_button_set_image(GTK_BUTTON(button), image);
-	gtk_tooltips_set_tip(gpAppFrame->tooltips,button,_("Move to top"),NULL);
+	gtk_widget_set_tooltip_text(button, _("Move to top"));
 	GTK_WIDGET_UNSET_FLAGS (button, GTK_CAN_FOCUS);
 	g_signal_connect(G_OBJECT(button),"clicked", G_CALLBACK(on_dictmanage_move_top_button_clicked), this);
 	gtk_box_pack_start (GTK_BOX (vbox), button, FALSE, FALSE, 0);
 	button = gtk_button_new();
 	image = gtk_image_new_from_stock(GTK_STOCK_GO_UP, GTK_ICON_SIZE_BUTTON);
 	gtk_button_set_image(GTK_BUTTON(button), image);
-	gtk_tooltips_set_tip(gpAppFrame->tooltips,button,_("Move up"),NULL);
+	gtk_widget_set_tooltip_text(button, _("Move up"));
 	GTK_WIDGET_UNSET_FLAGS (button, GTK_CAN_FOCUS);
 	g_signal_connect(G_OBJECT(button),"clicked", G_CALLBACK(on_dictmanage_move_up_button_clicked), this);
 	gtk_box_pack_start (GTK_BOX (vbox), button, FALSE, FALSE, 0);
 	button = gtk_button_new();
 	image = gtk_image_new_from_stock(GTK_STOCK_GO_DOWN, GTK_ICON_SIZE_BUTTON);
 	gtk_button_set_image(GTK_BUTTON(button), image);
-	gtk_tooltips_set_tip(gpAppFrame->tooltips,button,_("Move down"),NULL);
+	gtk_widget_set_tooltip_text(button, _("Move down"));
 	GTK_WIDGET_UNSET_FLAGS (button, GTK_CAN_FOCUS);
 	g_signal_connect(G_OBJECT(button),"clicked", G_CALLBACK(on_dictmanage_move_down_button_clicked), this);
 	gtk_box_pack_start (GTK_BOX (vbox), button, FALSE, FALSE, 0);
 	button = gtk_button_new();
 	image = gtk_image_new_from_stock(GTK_STOCK_GOTO_BOTTOM, GTK_ICON_SIZE_BUTTON);
 	gtk_button_set_image(GTK_BUTTON(button), image);
-	gtk_tooltips_set_tip(gpAppFrame->tooltips,button,_("Move to bottom"),NULL);
+	gtk_widget_set_tooltip_text(button, _("Move to bottom"));
 	GTK_WIDGET_UNSET_FLAGS (button, GTK_CAN_FOCUS);
 	g_signal_connect(G_OBJECT(button),"clicked", G_CALLBACK(on_dictmanage_move_bottom_button_clicked), this);
 	gtk_box_pack_start (GTK_BOX (vbox), button, FALSE, FALSE, 0);
diff -Nuar stardict-3.0.0.orig/src/docklet.cpp stardict-3.0.0/src/docklet.cpp
--- stardict-3.0.0.orig/src/docklet.cpp	2007-09-11 16:42:50.000000000 +0500
+++ stardict-3.0.0/src/docklet.cpp	2007-09-11 17:31:15.000000000 +0500
@@ -8,13 +8,12 @@
 
 #include "docklet.h"
 
-DockLet::DockLet(GtkWidget *mainwin, bool is_scan_on, GtkTooltips *tooltips,
+DockLet::DockLet(GtkWidget *mainwin, bool is_scan_on,
 		 const AppSkin& skin) : TrayBase(mainwin, is_scan_on)
 {
 	menu_ = NULL;
 	image_ = NULL;
 	embedded_ = false;
-	tooltips_ = tooltips;
 
 	normal_icon_ = get_impl(skin.docklet_normal_icon);
 	scan_icon_ = get_impl(skin.docklet_scan_icon);
@@ -28,13 +28,13 @@
 	docklet_ = egg_tray_icon_new("StarDict");
 	box_ = gtk_event_box_new();
 	if (is_hide_state()) {
-		gtk_tooltips_set_tip(tooltips_, box_, _("StarDict"),NULL);
+		gtk_widget_set_tooltip_text(box_, _("StarDict"));
 		image_ = gtk_image_new_from_pixbuf(normal_icon_);
 	} else if (is_scan_on()) {
-		gtk_tooltips_set_tip(tooltips_, box_, _("StarDict - Scanning"),NULL);
+		gtk_widget_set_tooltip_text(box_, _("StarDict - Scanning"));
 		image_ = gtk_image_new_from_pixbuf(scan_icon_);
 	} else {
-		gtk_tooltips_set_tip(tooltips_, box_, _("StarDict - Stopped"),NULL);
+		gtk_widget_set_tooltip_text(box_, _("StarDict - Stopped"));
 		image_ = gtk_image_new_from_pixbuf(stop_icon_);
 	}
 
@@ -180,15 +180,13 @@
 
 void DockLet::scan_on()
 {
-        gtk_tooltips_set_tip(tooltips_, box_, _("StarDict - Scanning"),
-                                     NULL);
+        gtk_widget_set_tooltip_text(box_, _("StarDict - Scanning"));
         gtk_image_set_from_pixbuf(GTK_IMAGE(image_), scan_icon_);
 }
 
 void DockLet::scan_off()
 {
-        gtk_tooltips_set_tip(tooltips_, box_, _("StarDict - Stopped"),
-                             NULL);
+        gtk_widget_set_tooltip_text(box_, _("StarDict - Stopped"));
         gtk_image_set_from_pixbuf(GTK_IMAGE(image_), stop_icon_);
 }
 
@@ -196,7 +194,7 @@
 {
         if (!image_)
                 return;
-        gtk_tooltips_set_tip(tooltips_, box_, _("StarDict"), NULL);
+        gtk_widget_set_tooltip_text(box_, _("StarDict"));
         gtk_image_set_from_pixbuf(GTK_IMAGE(image_), normal_icon_);
 }
 
diff -Nuar stardict-3.0.0.orig/src/docklet.h stardict-3.0.0/src/docklet.h
--- stardict-3.0.0.orig/src/docklet.h	2007-09-11 16:42:50.000000000 +0500
+++ stardict-3.0.0/src/docklet.h	2007-09-11 16:47:56.000000000 +0500
@@ -10,7 +10,7 @@
 
 class DockLet : public TrayBase {
 public:
-	DockLet(GtkWidget *, bool, GtkTooltips *, const AppSkin&);
+	DockLet(GtkWidget *, bool, const AppSkin&);
  	~DockLet();
 	void minimize_to_tray();
 	void set_scan_mode(bool);
@@ -23,7 +23,6 @@
 	GtkWidget *scan_menuitem_;
 	bool embedded_;
 	GdkPixbuf *normal_icon_, *stop_icon_, *scan_icon_;
-        GtkTooltips *tooltips_;
 
 	static void on_embedded(GtkWidget *widget, gpointer data);
 	static void on_destroyed(GtkWidget *widget, DockLet *oDockLet);
diff -Nuar stardict-3.0.0.orig/src/floatwin.cpp stardict-3.0.0/src/floatwin.cpp
--- stardict-3.0.0.orig/src/floatwin.cpp	2007-09-11 16:42:50.000000000 +0500
+++ stardict-3.0.0/src/floatwin.cpp	2007-09-11 17:50:47.000000000 +0500
@@ -119,7 +119,7 @@
 	g_signal_connect(G_OBJECT(button),"clicked", G_CALLBACK(on_query_click), this);
 	g_signal_connect(G_OBJECT(button),"enter_notify_event", G_CALLBACK(stardict_on_enter_notify), NULL);
 	gtk_box_pack_start(GTK_BOX(button_hbox),button,false,false,0);
-	gtk_tooltips_set_tip(gpAppFrame->tooltips,button,_("Query in the main window"),NULL);
+	gtk_widget_set_tooltip_text(button, _("Query in the main window"));
 
 	button= gtk_button_new();
 	gtk_container_add(GTK_CONTAINER(button),gtk_image_new_from_stock(GTK_STOCK_SAVE,GTK_ICON_SIZE_MENU));
@@ -128,7 +128,7 @@
 			 G_CALLBACK(on_save_click), this);
 	g_signal_connect(G_OBJECT(button),"enter_notify_event", G_CALLBACK(stardict_on_enter_notify), NULL);
 	gtk_box_pack_start(GTK_BOX(button_hbox),button,false,false,0);
-	gtk_tooltips_set_tip(gpAppFrame->tooltips,button,_("Save to file"),NULL);
+	gtk_widget_set_tooltip_text(button, _("Save to file"));
 
 	PronounceWordButton= gtk_button_new();
 	gtk_container_add(GTK_CONTAINER(PronounceWordButton),gtk_image_new_from_stock(GTK_STOCK_EXECUTE,GTK_ICON_SIZE_MENU));
@@ -136,7 +136,7 @@
 	g_signal_connect(G_OBJECT(PronounceWordButton),"clicked", G_CALLBACK(on_play_click), this);
 	g_signal_connect(G_OBJECT(PronounceWordButton),"enter_notify_event", G_CALLBACK(stardict_on_enter_notify), NULL);
 	gtk_box_pack_start(GTK_BOX(button_hbox),PronounceWordButton,false,false,0);
-	gtk_tooltips_set_tip(gpAppFrame->tooltips,PronounceWordButton,_("Pronounce the word"),NULL);
+	gtk_widget_set_tooltip_text(PronounceWordButton, _("Pronounce the word"));
 	
 	gtk_widget_set_sensitive(PronounceWordButton, false);
 
@@ -146,7 +146,7 @@
 	g_signal_connect(G_OBJECT(StopButton),"clicked", G_CALLBACK(on_stop_click), this);
 	g_signal_connect(G_OBJECT(StopButton),"enter_notify_event", G_CALLBACK(stardict_on_enter_notify), NULL);
 	gtk_box_pack_start(GTK_BOX(button_hbox),StopButton,false,false,0);
-	gtk_tooltips_set_tip(gpAppFrame->tooltips, StopButton, _("Stop selection-scanning"),NULL);
+	gtk_widget_set_tooltip_text(StopButton, _("Stop selection-scanning"));
 
 	gtk_widget_set_sensitive(gpAppFrame->oFloatWin.StopButton, 
 													 conf->get_bool_at("dictionary/scan_selection"));
@@ -158,7 +158,7 @@
 	g_signal_connect(G_OBJECT(button),"clicked", G_CALLBACK(on_help_click), this);
 	g_signal_connect(G_OBJECT(button),"enter_notify_event", G_CALLBACK(stardict_on_enter_notify), NULL);
 	gtk_box_pack_start(GTK_BOX(button_hbox),button,false,false,0);
-	gtk_tooltips_set_tip(gpAppFrame->tooltips,button,_("Help"),NULL);
+	gtk_widget_set_tooltip_text(button, _("Help"));
 
 	button= gtk_button_new();
 	gtk_container_add(GTK_CONTAINER(button),gtk_image_new_from_stock(GTK_STOCK_QUIT,GTK_ICON_SIZE_MENU));
@@ -166,7 +166,7 @@
 	g_signal_connect(G_OBJECT(button),"clicked", G_CALLBACK(on_quit_click), this);
 	g_signal_connect(G_OBJECT(button),"enter_notify_event", G_CALLBACK(stardict_on_enter_notify), NULL);
 	gtk_box_pack_start(GTK_BOX(button_hbox),button,false,false,0);
-	gtk_tooltips_set_tip(gpAppFrame->tooltips,button,_("Quit"),NULL);
+	gtk_widget_set_tooltip_text(button, _("Quit"));
 #endif
 
 	button = gtk_button_new();
@@ -180,7 +180,7 @@
 	g_signal_connect(G_OBJECT(button),"clicked", G_CALLBACK(vLockCallback),this);
 	g_signal_connect(G_OBJECT(button),"enter_notify_event", G_CALLBACK(stardict_on_enter_notify), NULL);
 	gtk_box_pack_end(GTK_BOX(button_hbox),button,false,false,0);
-	gtk_tooltips_set_tip(gpAppFrame->tooltips,button,_("Lock floating window"),NULL);
+	gtk_widget_set_tooltip_text(button, _("Lock floating window"));
 	view.reset(new ArticleView(GTK_BOX(vbox), true));
 		
 	gtk_widget_show_all(frame);
diff -Nuar stardict-3.0.0.orig/src/mainwin.cpp stardict-3.0.0/src/mainwin.cpp
--- stardict-3.0.0.orig/src/mainwin.cpp	2007-09-11 16:42:50.000000000 +0500
+++ stardict-3.0.0/src/mainwin.cpp	2007-09-11 17:42:00.000000000 +0500
@@ -87,7 +87,7 @@
 	g_signal_connect(G_OBJECT(button),"clicked", G_CALLBACK(ClearCallback),this);
 	g_signal_connect(G_OBJECT(button),"enter_notify_event", G_CALLBACK(stardict_on_enter_notify), NULL);
 	gtk_box_pack_start(GTK_BOX(hbox),button,false,false,3);
-	gtk_tooltips_set_tip(gpAppFrame->tooltips,button,_("Clear the search box"),NULL);
+	gtk_widget_set_tooltip_text(button, _("Clear the search box"));
 #endif
 
 	GtkListStore* list_store = gtk_list_store_new(1, G_TYPE_STRING);
@@ -114,7 +114,7 @@
 	g_signal_connect(G_OBJECT(button),"clicked", G_CALLBACK(GoCallback),this);
 	g_signal_connect(G_OBJECT(button),"enter_notify_event", G_CALLBACK(stardict_on_enter_notify), NULL);
 	gtk_box_pack_start(GTK_BOX(hbox),button,false,false,0);
-	gtk_tooltips_set_tip(gpAppFrame->tooltips,button,_("Fuzzy Query"),NULL);
+	gtk_widget_set_tooltip_text(button, _("Fuzzy Query"));
 #endif
 
 	button=gtk_button_new();
@@ -126,7 +126,7 @@
 	g_signal_connect(G_OBJECT(button),"button_press_event", G_CALLBACK(on_back_button_press),this);
 	g_signal_connect(G_OBJECT(button),"enter_notify_event", G_CALLBACK(stardict_on_enter_notify), NULL);
 	gtk_box_pack_start(GTK_BOX(hbox),button,false,false,0);
-	gtk_tooltips_set_tip(gpAppFrame->tooltips,button,_("Go Back - Right button: history (Alt+Left)"),NULL);
+	gtk_widget_set_tooltip_text(button, _("Go Back - Right button: history (Alt+Left)"));
 
 	GtkWidget *label;
 	label = gtk_label_new("\t");
@@ -141,7 +141,7 @@
 	g_signal_connect(G_OBJECT(button),"clicked", G_CALLBACK(MenuCallback),this);
 	g_signal_connect(G_OBJECT(button),"enter_notify_event", G_CALLBACK(stardict_on_enter_notify), NULL);
 	gtk_box_pack_start(GTK_BOX(hbox),button,false,false,0);
-	gtk_tooltips_set_tip(gpAppFrame->tooltips,button,_("Show the main menu (Alt+M)"),NULL);
+	gtk_widget_set_tooltip_text(button, _("Show the main menu (Alt+M)"));
 }
 
 void TopWin::Destroy(void)
@@ -1245,7 +1245,7 @@
 	GtkWidget *image = gtk_image_new_from_pixbuf(get_impl(gpAppFrame->oAppSkin.index_wazard));
 	gtk_container_add (GTK_CONTAINER (wazard_button), image);
 	gtk_widget_show_all(wazard_button);
-	gtk_tooltips_set_tip(gpAppFrame->tooltips,wazard_button,_("List"),NULL);
+	gtk_widget_set_tooltip_text(wazard_button, _("List"));
 	gtk_toggle_button_set_active(GTK_TOGGLE_BUTTON(wazard_button), true);
 	g_signal_connect(G_OBJECT(wazard_button),"toggled", G_CALLBACK(on_wazard_button_toggled), this);
 
@@ -1256,7 +1256,7 @@
 	image = gtk_image_new_from_pixbuf(get_impl(gpAppFrame->oAppSkin.index_dictlist));
 	gtk_container_add (GTK_CONTAINER (result_button), image);
 	gtk_widget_show_all(result_button);
-	gtk_tooltips_set_tip(gpAppFrame->tooltips,result_button,_("Result"),NULL);
+	gtk_widget_set_tooltip_text(result_button, _("Result"));
 	g_signal_connect(G_OBJECT(result_button),"toggled", G_CALLBACK(on_result_button_toggled), this);
 	
 	GtkWidget *translate_button = gtk_radio_button_new_from_widget(GTK_RADIO_BUTTON(result_button));
@@ -1266,7 +1266,7 @@
 	image = gtk_image_new_from_pixbuf(get_impl(gpAppFrame->oAppSkin.index_translate));
 	gtk_container_add (GTK_CONTAINER (translate_button), image);
 	gtk_widget_show_all(translate_button);
-	gtk_tooltips_set_tip(gpAppFrame->tooltips,translate_button,_("Full-Text Translation"),NULL);
+	gtk_widget_set_tooltip_text(translate_button, _("Full-Text Translation"));
 	g_signal_connect(G_OBJECT(translate_button),"toggled", G_CALLBACK(on_translate_button_toggled), this);
 
 	if (has_treedict) {
@@ -1277,7 +1277,7 @@
 		image = gtk_image_new_from_pixbuf(get_impl(gpAppFrame->oAppSkin.index_appendix));
 		gtk_container_add (GTK_CONTAINER (appendix_button), image);
 		gtk_widget_show_all(appendix_button);
-		gtk_tooltips_set_tip(gpAppFrame->tooltips,appendix_button,_("Tree"),NULL);
+		gtk_widget_set_tooltip_text(appendix_button, _("Tree"));
 		g_signal_connect(G_OBJECT(appendix_button),"toggled", G_CALLBACK(on_appendix_button_toggled), this);
 	}
 
@@ -1288,7 +1288,7 @@
 	GTK_WIDGET_UNSET_FLAGS (choosegroup_button, GTK_CAN_FOCUS);
 	g_signal_connect(G_OBJECT(choosegroup_button),"clicked", G_CALLBACK(on_choose_group_button_clicked),this);
 	gtk_box_pack_start(GTK_BOX(vbox),choosegroup_button,false,false,0);
-	gtk_tooltips_set_tip(gpAppFrame->tooltips, choosegroup_button, _("Choose dict group"),NULL);
+	gtk_widget_set_tooltip_text(choosegroup_button, _("Choose dict group"));
 	choosegroup_menu = NULL;
 	UpdateChooseGroup();
 
@@ -1301,7 +1301,7 @@
 	g_signal_connect(G_OBJECT(button),"clicked", G_CALLBACK(NextCallback),this);
 	g_signal_connect(G_OBJECT(button),"enter_notify_event", G_CALLBACK(stardict_on_enter_notify), NULL);
 	gtk_box_pack_end(GTK_BOX(vbox),button,false,false,0);
-	gtk_tooltips_set_tip(gpAppFrame->tooltips,button,_("Next word (Alt+Down)"),NULL);
+	gtk_widget_set_tooltip_text(button, _("Next word (Alt+Down)"));
 
 	button=gtk_button_new();
 	gtk_container_add(GTK_CONTAINER(button),gtk_image_new_from_stock(GTK_STOCK_GO_UP,GTK_ICON_SIZE_BUTTON));
@@ -1311,7 +1311,7 @@
 	g_signal_connect(G_OBJECT(button),"clicked", G_CALLBACK(PreviousCallback),this);
 	g_signal_connect(G_OBJECT(button),"enter_notify_event", G_CALLBACK(stardict_on_enter_notify), NULL);
 	gtk_box_pack_end(GTK_BOX(vbox),button,false,false,0);
-	gtk_tooltips_set_tip(gpAppFrame->tooltips,button,_("Previous word (Alt+Up)"),NULL);
+	gtk_widget_set_tooltip_text(button, _("Previous word (Alt+Up)"));
 }
 
 void LeftWin::on_wazard_button_toggled(GtkToggleButton *button, LeftWin *oLeftWin)
@@ -1500,7 +1500,7 @@
 #else
 	gtk_box_pack_start(GTK_BOX(hbox),ShowListButton,false,false,5);
 #endif
-	gtk_tooltips_set_tip(gpAppFrame->tooltips,ShowListButton,_("Show the word list"),NULL);
+	gtk_widget_set_tooltip_text(ShowListButton, _("Show the word list"));
 
 	HideListButton=gtk_button_new();
 	image = gtk_image_new_from_stock(GTK_STOCK_GOTO_FIRST,GTK_ICON_SIZE_SMALL_TOOLBAR);
@@ -1515,7 +1515,7 @@
 #else
 	gtk_box_pack_start(GTK_BOX(hbox),HideListButton,false,false,5);
 #endif
-	gtk_tooltips_set_tip(gpAppFrame->tooltips, HideListButton,_("Hide the word list"),NULL);
+	gtk_widget_set_tooltip_text(HideListButton, _("Hide the word list"));
 
 
 	if (conf->get_bool_at("main_window/hide_list"))
@@ -1533,7 +1533,7 @@
 	GTK_WIDGET_UNSET_FLAGS (button, GTK_CAN_FOCUS);
 	g_signal_connect(G_OBJECT(button),"clicked", G_CALLBACK(CopyCallback),this);
 	gtk_box_pack_start(GTK_BOX(hbox),button,false,false,5);
-	gtk_tooltips_set_tip(gpAppFrame->tooltips,button,_("Copy"),NULL);
+	gtk_widget_set_tooltip_text(button, _("Copy"));
 #endif
 
 	PronounceWordMenuButton = gtk_menu_tool_button_new_from_stock(GTK_STOCK_EXECUTE);
@@ -1547,7 +1547,7 @@
 #else
 	gtk_box_pack_start(GTK_BOX(hbox),GTK_WIDGET(PronounceWordMenuButton),false,false,5);
 #endif
-	gtk_tool_item_set_tooltip(GTK_TOOL_ITEM(PronounceWordMenuButton), gpAppFrame->tooltips, _("Pronounce the word"),NULL);
+	gtk_tool_item_set_tooltip_text(GTK_TOOL_ITEM(PronounceWordMenuButton), _("Pronounce the word"));
 	gtk_widget_set_sensitive(GTK_WIDGET(PronounceWordMenuButton), false);
 
 	button=gtk_button_new();
@@ -1561,7 +1561,7 @@
 #else
 	gtk_box_pack_start(GTK_BOX(hbox),button,false,false,5);
 #endif
-	gtk_tooltips_set_tip(gpAppFrame->tooltips,button,_("Save to file(Alt+E)"),NULL);
+	gtk_widget_set_tooltip_text(button, _("Save to file(Alt+E)"));
 
 #ifndef CONFIG_GPE
 	button=gtk_button_new();
@@ -1571,7 +1571,7 @@
 	GTK_WIDGET_UNSET_FLAGS (button, GTK_CAN_FOCUS);
 	g_signal_connect(G_OBJECT(button),"clicked", G_CALLBACK(PrintCallback),this);
 	gtk_box_pack_start(GTK_BOX(hbox),button,false,false,5);
-	gtk_tooltips_set_tip(gpAppFrame->tooltips,button,_("Print"),NULL);
+	gtk_widget_set_tooltip_text(button, _("Print"));
 	gtk_widget_set_sensitive(button, false);
 #endif
 
@@ -1586,7 +1586,7 @@
 #else
 	gtk_box_pack_start(GTK_BOX(hbox),button,false,false,5);
 #endif
-	gtk_tooltips_set_tip(gpAppFrame->tooltips,button,_("Search in the definition (Ctrl+F)"),NULL);
+	gtk_widget_set_tooltip_text(button, _("Search in the definition (Ctrl+F)"));
 }
 
 void ToolWin::ShowListCallback(GtkWidget *widget, gpointer data)
@@ -2707,7 +2707,7 @@
 	g_signal_connect(G_OBJECT(ScanSelectionCheckButton), "toggled",
 									 G_CALLBACK(ScanCallback), NULL);
 	gtk_box_pack_start(GTK_BOX(hbox),ScanSelectionCheckButton,false,false,0);
-	gtk_tooltips_set_tip(gpAppFrame->tooltips,ScanSelectionCheckButton,_("Scan the selection"),NULL);
+	gtk_widget_set_tooltip_text(ScanSelectionCheckButton, _("Scan the selection"));
 
 	GtkWidget *button = gtk_button_new();
 	gtk_container_add(GTK_CONTAINER(button),gtk_image_new_from_stock(GTK_STOCK_DIALOG_INFO,GTK_ICON_SIZE_SMALL_TOOLBAR));
@@ -2721,7 +2721,7 @@
 #else
 	gtk_box_pack_start(GTK_BOX(hbox),button,false,false,8);
 #endif
-	gtk_tooltips_set_tip(gpAppFrame->tooltips,button,_("Show info"),NULL);
+	gtk_widget_set_tooltip_text(button, _("Show info"));
 
 	button=gtk_button_new();
 	gtk_container_add(GTK_CONTAINER(button),gtk_image_new_from_stock(GTK_STOCK_QUIT,GTK_ICON_SIZE_SMALL_TOOLBAR));
@@ -2731,7 +2731,7 @@
 	g_signal_connect(G_OBJECT(button),"clicked", G_CALLBACK(QuitCallback), NULL);
 	g_signal_connect(G_OBJECT(button),"enter_notify_event", G_CALLBACK(stardict_on_enter_notify), NULL);
 	gtk_box_pack_start(GTK_BOX(hbox),button,false,false,0);
-	gtk_tooltips_set_tip(gpAppFrame->tooltips,button,_("Quit"), NULL);
+	gtk_widget_set_tooltip_text(button, _("Quit"));
 
 	GtkWidget *event_box = gtk_event_box_new();
 	g_signal_connect (G_OBJECT (event_box), "enter_notify_event", G_CALLBACK (vEnterNotifyCallback), this);
@@ -2753,7 +2753,7 @@
 	g_signal_connect(G_OBJECT(button),"clicked", G_CALLBACK(PreferenceCallback),this);
 	g_signal_connect(G_OBJECT(button),"enter_notify_event", G_CALLBACK(stardict_on_enter_notify), NULL);
 	gtk_box_pack_end(GTK_BOX(hbox),button,false,false,0);
-	gtk_tooltips_set_tip(gpAppFrame->tooltips,button,_("Preferences"),NULL);
+	gtk_widget_set_tooltip_text(button, _("Preferences"));
 
 	button=gtk_button_new();
 	gtk_container_add(GTK_CONTAINER(button),gtk_image_new_from_stock(GTK_STOCK_PROPERTIES,GTK_ICON_SIZE_SMALL_TOOLBAR));
@@ -2763,7 +2763,7 @@
 	g_signal_connect(G_OBJECT(button),"clicked", G_CALLBACK(DictManageCallback),this);
 	g_signal_connect(G_OBJECT(button),"enter_notify_event", G_CALLBACK(stardict_on_enter_notify), NULL);
 	gtk_box_pack_end(GTK_BOX(hbox),button,false,false,0);
-	gtk_tooltips_set_tip(gpAppFrame->tooltips,button,_("Manage dictionaries"),NULL);
+	gtk_widget_set_tooltip_text(button, _("Manage dictionaries"));
 
 	button=gtk_button_new();
 	gtk_container_add(GTK_CONTAINER(button),gtk_image_new_from_stock(GTK_STOCK_INDEX,GTK_ICON_SIZE_SMALL_TOOLBAR));
@@ -2773,7 +2773,7 @@
 	g_signal_connect(G_OBJECT(button),"clicked", G_CALLBACK(NewVersionCallback),this);
 	g_signal_connect(G_OBJECT(button),"enter_notify_event", G_CALLBACK(stardict_on_enter_notify), NULL);
 	gtk_box_pack_end(GTK_BOX(hbox),button,false,false,0);
-	gtk_tooltips_set_tip(gpAppFrame->tooltips,button,_("Go to the StarDict website"),NULL);
+	gtk_widget_set_tooltip_text(button, _("Go to the StarDict website"));
 #endif
 
 	button=gtk_button_new();
@@ -2785,7 +2785,7 @@
 	g_signal_connect(G_OBJECT(button),"button_press_event", G_CALLBACK(on_internetsearch_button_press),this);
 	g_signal_connect(G_OBJECT(button),"enter_notify_event", G_CALLBACK(stardict_on_enter_notify), NULL);
 	gtk_box_pack_end(GTK_BOX(hbox),button,false,false,0);
-	gtk_tooltips_set_tip(gpAppFrame->tooltips,button,_("Search an Internet dictionary - Right button: website list"),NULL);
+	gtk_widget_set_tooltip_text(button, _("Search an Internet dictionary - Right button: website list"));
 }
 
 gboolean BottomWin::vEnterNotifyCallback (GtkWidget *widget, GdkEventCrossing *event, BottomWin *oBottomWin)
diff -Nuar stardict-3.0.0.orig/src/stardict.cpp stardict-3.0.0/src/stardict.cpp
--- stardict-3.0.0.orig/src/stardict.cpp	2007-09-11 16:42:50.000000000 +0500
+++ stardict-3.0.0/src/stardict.cpp	2007-09-11 17:57:31.000000000 +0500
@@ -305,7 +305,6 @@
 	g_signal_connect (G_OBJECT (window), "key_press_event", G_CALLBACK (vKeyPressReleaseCallback), this);
 	g_signal_connect (G_OBJECT (window), "key_release_event", G_CALLBACK (vKeyPressReleaseCallback), this);
 
-	tooltips = gtk_tooltips_new ();
 
 	GtkWidget *vbox = gtk_vbox_new(FALSE, 0);
 	gtk_widget_show(vbox);
@@ -318,7 +318,7 @@
 	unlock_keys->set_comb(combnum2str(conf->get_int_at("dictionary/scan_modifier_key")));
 	oFloatWin.Create();
 	bool scan=conf->get_bool_at("dictionary/scan_selection");
-	oDockLet.reset(PlatformFactory::create_tray_icon(window, scan, tooltips,
+	oDockLet.reset(PlatformFactory::create_tray_icon(window, scan,
 							 oAppSkin));
 	oDockLet->on_quit_.connect(sigc::mem_fun(this, &AppCore::Quit));
 	oDockLet->on_change_scan_.connect(
diff -Nuar stardict-3.0.0.orig/src/stardict.h stardict-3.0.0/src/stardict.h
--- stardict-3.0.0.orig/src/stardict.h	2007-09-11 16:42:50.000000000 +0500
+++ stardict-3.0.0/src/stardict.h	2007-09-11 16:48:43.000000000 +0500
@@ -80,7 +80,6 @@
 	unsigned int waiting_mainwin_lookupcmd_seq;
 	unsigned int waiting_floatwin_lookupcmd_seq;
 	GtkWidget *window;
-	GtkTooltips *tooltips;
 
 	TopWin oTopWin;
 	MidWin oMidWin;
