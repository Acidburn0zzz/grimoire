           SPELL=ndiswrapper
if  [  "$NDIS_SVN"  ==  "y"  ];  then
  if  [  "$NDIS_SVN_AUTOUPDATE"  ==  "y"  ];  then
         VERSION=$(date +%Y%m%d)
  FORCE_DOWNLOAD=on
  else
         VERSION=svn
  fi
          SOURCE=$SPELL-svn.tar.bz2
SOURCE_DIRECTORY=$BUILD_DIRECTORY/$SPELL-svn/$SPELL
   SOURCE_URL[0]=svn://ndiswrapper.svn.sourceforge.net/svnroot/ndiswrapper/trunk:ndiswrapper
   SOURCE_IGNORE=volatile
else
         VERSION=1.50
          SOURCE=$SPELL-$VERSION.tar.gz
SOURCE_DIRECTORY="$BUILD_DIRECTORY/$SPELL-$VERSION"
   SOURCE_URL[0]=$SOURCEFORGE_URL/$SPELL/$SOURCE
#     SOURCE_HASH=sha512:07280314a61f63593a216306dd17ec5d90050ecae3cf7a11c1c97157598b8035664c1692819fadffa91121ca41c448eb767a6c3017482c344586f83bc8248e29
      SOURCE_GPG="gurus.gpg:$SOURCE.sig:WORKS_FOR_ME"
fi
        WEB_SITE=http://$SPELL.sf.net/
        KEYWORDS="ndis driver"
         ENTERED=20040417
           SHORT='Kernel module to load NDIS (W%nd&ws network driver API) drivers'
cat << EOF
Some vendors refuse to release specs or even a binary linux-driver for their
WLAN cards. This project tries to solve this problem by making a kernel module
that can load Ndis (windows network driver API) drivers. We're not trying to
implement all of the Ndis API but rather implement the functions needed to get
these unsupported cards working.

The driver works quite well on many builtin cards as well as PCMCIA (Cardbus
only) cards.

Most chipsets without proper Linux drivers are supported. You can see a list of chipsets
here: $WEB_SITE/supported_chipsets.html.
EOF
