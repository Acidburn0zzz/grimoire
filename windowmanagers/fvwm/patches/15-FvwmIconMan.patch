diff -U10 -Naupr fvwm-2.5.21-12/modules/FvwmIconMan/FvwmIconMan.h fvwm-2.5.21-15/modules/FvwmIconMan/FvwmIconMan.h
--- fvwm-2.5.21-12/modules/FvwmIconMan/FvwmIconMan.h	2007-03-03 13:23:14.000000000 +0100
+++ fvwm-2.5.21-15/modules/FvwmIconMan/FvwmIconMan.h	2007-03-03 13:24:58.000000000 +0100
@@ -308,20 +308,22 @@ typedef struct win_manager {
 	Uchar showtransient;
 	rectangle managed_g;    /* dimensions of managed screen portion */
 	int relief_thickness;	/* relief thickness for each non-flat button */
 #define TIPS_NEVER  0
 #define TIPS_ALWAYS 1
 #define TIPS_NEEDED 2
 	int tips;
 	char *tips_fontname;
 	char *tips_formatstring;
 	ftips_config *tips_conf;
+	Uchar roundedcorners;
+	int padding;
 	
 	/* X11 state */
 	Window theWindow, theFrame;
 	long sizehints_flags;
 	int gravity;
 	int fontheight, fontwidth;
 	int win_title, win_border;
 	int off_x, off_y;
 	Uchar cursor_in_window;
 	Uchar window_up;
diff -U10 -Naupr fvwm-2.5.21-12/modules/FvwmIconMan/readconfig.c fvwm-2.5.21-15/modules/FvwmIconMan/readconfig.c
--- fvwm-2.5.21-12/modules/FvwmIconMan/readconfig.c	2007-03-03 13:23:14.000000000 +0100
+++ fvwm-2.5.21-15/modules/FvwmIconMan/readconfig.c	2007-03-03 13:24:58.000000000 +0100
@@ -2021,20 +2021,54 @@ void read_in_resources()
 	  ConsoleMessage("Bad line: %s\n", current_line);
 	  continue;
 	}
 	if (extract_int(p, &n) == 0) {
 	  ConsoleMessage("This is not a number: %s\n", p);
 	  ConsoleMessage("Bad line: %s\n", current_line);
 	  continue;
 	}
 	SET_MANAGER(manager, relief_thickness, n);
       }
+      else if (!strcasecmp(option1, "padding")) {
+        p = read_next_cmd(READ_ARG);
+        if (!p) {
+	  ConsoleMessage("Bad line: %s\n", current_line);
+	  continue;
+        }
+	if (extract_int(p, &n) == 0) {
+	  ConsoleMessage("This is not a number: %s\n", p);
+	  ConsoleMessage("Bad line: %s\n", current_line);
+	  continue;
+	}
+	SET_MANAGER(manager, padding, n);
+      }
+      else if (!strcasecmp(option1, "roundedcorners")) {
+       p = read_next_cmd(READ_ARG);
+       if (!p) {
+	 ConsoleMessage("Bad line: %s\n", current_line);
+	 ConsoleMessage("Need argument to roundedcorners\n");
+	 continue;
+       }
+       if (!strcasecmp(p, "true")) {
+	 i = 1;
+       }
+       else if (!strcasecmp(p, "false")) {
+	 i = 0;
+       }
+       else {
+	 ConsoleMessage("Bad line: %s\n", current_line);
+	 ConsoleMessage("What is this: %s?\n", p);
+	 continue;
+       }
+       ConsoleDebug(CONFIG, "Setting roundedcorners to: %d\n", i);
+       SET_MANAGER(manager, roundedcorners, i);
+      }
       else if (!strcasecmp(option1, "tips")) {
 	      p = read_next_cmd(READ_ARG);
 	      if (!p) {
 		      ConsoleMessage("Bad line: %s\n", current_line);
 		      continue;
 	      }
 	      if (!strcasecmp(p, "always")) {
 		      i = TIPS_ALWAYS;
 	      }
 
diff -U10 -Naupr fvwm-2.5.21-12/modules/FvwmIconMan/xmanager.c fvwm-2.5.21-15/modules/FvwmIconMan/xmanager.c
--- fvwm-2.5.21-12/modules/FvwmIconMan/xmanager.c	2007-03-03 13:23:14.000000000 +0100
+++ fvwm-2.5.21-15/modules/FvwmIconMan/xmanager.c	2007-03-03 13:24:58.000000000 +0100
@@ -1389,20 +1389,22 @@ static void get_button_geometry(WinManag
   g->text_x = g->icon_x + g->icon_w + 2;
   g->text_w = g->button_w - 4 - (g->text_x - g->button_x);
   if (g->text_w <= 0)
     g->text_w = 1;
   g->text_h = man->fontheight;
 
   text_pad = center_padding(man->fontheight, g->button_h);
 
   g->text_y = g->button_y + text_pad;
   g->text_base = g->text_y + man->FButtonFont->ascent;
+
+  g->button_w -= man->padding;
 }
 
 static void draw_button_background(
 	WinManager *man, XRectangle bounding, Contexts button_state)
 {
 	int cset = man->colorsets[button_state];
 
 	if (CSET_IS_TRANSPARENT_PR_PURE(cset) ||
 	    man->backContext[button_state] == None)
 	{
@@ -1661,20 +1663,47 @@ static void draw_relief(WinManager *man,
 		      g->button_w - 5, g->button_h - 5, context2, context1,
 		      relief);
   }
   else {
     RelieveRectangle(theDisplay, man->theWindow, g->button_x, g->button_y,
 		      g->button_w - 1, g->button_h - 1, context1, context2,
 		      relief);
   }
 }
 
+static void __draw_rounded_corner(WinManager *man, ButtonGeometry *g,
+    int x, int y, int width, int height, GC gc)
+{
+    int x1 = g->button_x + x;
+    int x2 = g->button_x + g->button_w - x - width;
+    int y1 = g->button_y + y;
+    int y2 = g->button_y + g->button_h - y - height;
+
+    XFillRectangle(theDisplay, man->theWindow, gc, x1, y1, width, height);
+    XFillRectangle(theDisplay, man->theWindow, gc, x2, y1, width, height);
+    XFillRectangle(theDisplay, man->theWindow, gc, x1, y2, width, height);
+    XFillRectangle(theDisplay, man->theWindow, gc, x2, y2, width, height);
+}
+
+static void draw_rounded_corners(WinManager *man, ButtonGeometry *g, GC gc)
+{
+    if (man->roundedcorners)
+    {
+	__draw_rounded_corner(man, g, 0, 0, 2, 1, man->backContext[TITLE_CONTEXT]);
+	__draw_rounded_corner(man, g, 0, 1, 1, 1, man->backContext[TITLE_CONTEXT]);
+	__draw_rounded_corner(man, g, 1, 1, 1, 1, gc);
+    }
+
+    XFillRectangle(theDisplay, man->theWindow, man->backContext[TITLE_CONTEXT],
+	    g->button_x + g->button_w, g->button_y, man->padding, g->button_h);
+}
+
 static void draw_button(WinManager *man, int button, int force)
 {
 	Button *b;
 	WinData *win;
 	ButtonGeometry g, old_g;
 	GC context1, context2;
 	Contexts button_state;
 	int cleared_button = 0, dirty;
 	int draw_background = 0, draw_icon = 0, draw_string = 0;
 	int clear_old_pic = 0;
@@ -1849,20 +1878,22 @@ static void draw_button(WinManager *man,
 		{
 			ConsoleDebug(X11, "\tDrawing reliefs\n");
 			if (!PictureUseBWOnly())
 			{
 				get_gcs(
 					man, button_state, win->iconified,
 					&context1, &context2);
 				draw_relief(
 					man, button_state, &g, context1,
 					context2);
+
+                draw_rounded_corners(man, &g, context1);
 			}
 			else if (button_state & SELECT_CONTEXT)
 			{
 				XDrawRectangle(
 					theDisplay, man->theWindow,
 					man->hiContext[button_state],
 					g.button_x + 2, g.button_y + 1,
 					g.button_w - 4, g.button_h - 2);
 			}
 		}
