. "$GRIMOIRE/FUNCTIONS" &&

           SPELL=ipset
if is_version_less $(get_kernel_version) 2.6.35; then
         VERSION=4.5
          SOURCE=$SPELL-$VERSION.tar.bz2
     SOURCE_HASH=sha512:ccac555257600b8fd2e229426514582e6f3f04000b4f2bc704d28efdae0869c1c6952ddb9a833a32e49604d16a4a9aa0a5ea847d469a31e567e84f36b76e19f2
else
         VERSION=6.12.1
          SOURCE=$SPELL-$VERSION.tar.bz2
     SOURCE_HASH=sha512:cd3ef90c56a3e7fd70d95cc021f41a01c25a175f22f7157705b37391f92829a7f55bef37c3a98b0544b5814d597b1a02513328ba3dc91929f4b7642dd1c1ebaa
fi
   SOURCE_URL[0]=http://ipset.netfilter.org/$SOURCE
SOURCE_DIRECTORY="$BUILD_DIRECTORY/$SPELL-$VERSION"
        WEB_SITE=http://ipset.netfilter.org/
         ENTERED=20110926
      LICENSE[0]=GPL
           SHORT="IP sets"
cat << EOF
IP sets are a framework inside the Linux 2.4.x and 2.6.x kernel, which can be
administered by the ipset utility. Depending on the type, currently an IP set
may store IP addresses, (TCP/UDP) port numbers or IP addresses with MAC
addresses in a way, which ensures lightning speed when matching an entry
against a set.

If you want to
 * store multiple IP addresses or port numbers and match against the collection
   by iptables at one swoop;
 * dynamically update iptables rules against IP addresses or ports without
   performance penalty;
 * express complex IP address and ports based rulesets with one single iptables
   rule and benefit from the speed of IP sets

then ipset may be the proper tool for you.
EOF
