# Author: Vlad Glagolev <stealth@sourcemage.org>
#
# Changes in this patch:
# * multiple groups and comments support
# * bugfix for tab separators
--- src/ulimits.c.orig
+++ src/ulimits.c
@@ -29,6 +29,7 @@
 
 #include <unistd.h>
 #include <pwd.h>
+#include <grp.h>
 #include <sys/stat.h>
 #include <sys/types.h>
 #include <sys/resource.h>
@@ -95,6 +96,47 @@
 #define PLIMIT_PRIORITY RLIMIT_NLIMITS + 3
 
 /**
+ * Check if user is in the group
+ *
+ * @param uname A pointer to a username
+ * @param gname A pointer to a groupname
+ * @return 0 if a user belongs to group, -1 otherwise
+ */
+static int user_in_group(const char *uname, const char *gname)
+{
+	struct group *groupdata;
+	char *const *list;
+
+	if (uname == NULL || gname == NULL) {
+		return -1;
+	}
+
+	if (*gname == '@') {
+		gname++;
+	} else {
+		return -1;
+	}
+
+	groupdata = getgrnam(gname);
+
+	if (groupdata == NULL) {
+		return -1;
+	}
+
+	list = groupdata->gr_mem;
+
+	while (*list != NULL) {
+		if (strcmp(*list, uname) == 0) {
+			return 0;
+		}
+
+		list++;
+	}
+
+	return -1;
+}
+
+/**
  * Parses a single limit specification.
  * This function parses a single limit specification (that is, a single
  * letter followed by a numerical value) and fills the provided
@@ -243,6 +285,9 @@
         return -1;
     }
 
+    if ((n = strlen(buffer)) != 0)
+        buffer[n++] = ' ';
+
     while ( (c = fgetc(f)) != '\n' ) {
         if ( c == EOF )
             return -1;
@@ -284,9 +329,11 @@
     while ( ! found && ! feof(f) ) {
         c = fgetc(f);
 
-        if ( isgraph(c) && n < len - 1 )
+        if (c == '#')
+            discard_line(f);
+        else if ( isgraph(c) && n < len - 1 )
             buffer[n++] = (char)c;
-        else if ( c == ' ' && n > 0 )
+        else if ( (c == ' ' || c == '\t') && n > 0 )
             found = 1;
         else {
             n = 0;
@@ -343,7 +390,8 @@
                     size_t                  len)
 {
     FILE *f;
-    char lbuf[LIMIT_LINE_LENGTH+1], nbuf[USER_NAME_LENGTH+1];
+    // Initialize arrays to perform strlen() on them in get_line()
+    char lbuf[LIMIT_LINE_LENGTH+1] = "", nbuf[USER_NAME_LENGTH+1] = "";
     int user_found = 0, default_found = 0;
     ssize_t n = 0;
 
@@ -355,13 +403,13 @@
     if ( (f = open_limits_file(LIMITS_FILE)) == NULL )
         return -1;
 
-    while ( ! user_found && ! feof(f) ) {
+    while ( ! feof(f) ) {
         if ( get_first_field(f, nbuf, sizeof(nbuf)) == -1 )
             continue;
 
         if ( strcmp(nbuf, "*") == 0 )
             default_found = get_line(f, lbuf, sizeof(lbuf)) != -1;
-        else if ( strcmp(nbuf, user) == 0 )
+        else if ( strcmp(nbuf, user) == 0 || user_in_group(user, nbuf) == 0 )
             user_found = get_line(f, lbuf, sizeof(lbuf)) != -1;
         else
             discard_line(f);
